#textdomain wesnoth-voadar
[unit_type]
    # Events related to this unit are kept here for organizational purposes.
    id=Voadar Elvish Champion
	[base_unit]
		id=NE Voadar Elvish Champion
	[/base_unit]
    
    # General schedule is shared with his wife in her unit file
    
    [event]
        name=start
        id=Commodir_prepare_variables
        {VARIABLE Commodir.conversation Commodir_conversation}
        {VARIABLE gladiators.puzzles_solved 0}
		# these variables are for the dialog
		# if the unit speaking is Commodir, then the word in the dialog should be Tetaitiel
		# (because each should be talking about the other)
		{VARIABLE Commodir.spouse Tetaitiel}
		{VARIABLE Tetaitiel.spouse Commodir}
    [/event]
    
    # This is just like Tetaitiel's conversation. If you need to understand something here that you don't,
    # look at her file. It has some comments, and if you can understand it then you'll understand this.
    [event]
        name=Commodir_conversation
        id=Commodir_conversation
        first_time_only=no
        [if]
            [have_unit]
                id=Commodir
                x=0-32
				y=0-40
            [/have_unit]
            [then]
                [fire_event]
                    name=gladiator_conversation_launch_puzzles
                    [primary_unit]
                        id=Commodir
                    [/primary_unit]
                [/fire_event]
            [/then]
            [else]
                [if]
                    [have_unit]
                        id=Commodir
                        x=0-15
                    [/have_unit]
                    [then]
                        [fire_event]
                            name=gladiator_conversation_in
                            [primary_unit]
                                id=Commodir
                            [/primary_unit]
                        [/fire_event]
                    [/then]
                    [else]
                        [fire_event]
                            name=gladiator_conversation_advertise
                            [primary_unit]
                                id=Commodir
                            [/primary_unit]
                        [/fire_event]
                    [/else]
                [/if]
            [/else]
        [/if]
    [/event]
    
    {VOADAR_CREATE_CONVERSATION_OPTION Commodir}
    
    [event]
        name=victory
        id=Commodir_clear_variables
        {CLEAR_VARIABLE Commodir}
    [/event]
    
    # all conversations and item reactions are shared with Tetaitiel
    
    ########################################
    # Puzzles mini game begins here
    ########################################
    
    [event]
        name=gladiator_conversation_launch_puzzles
        id=gladiator_conversation_launch_puzzles
        first_time_only=no
        # either Commodir or Tetaitiel has been passed as the primary unit
        # all this event does is decide which of the puzzles, if any should be played
        [switch]
            variable=gladiators.puzzles_solved
            [case]
                value=0
                [fire_event]
                    name=gladiator_syllogisms
                    [primary_unit]
                        id=$unit.id|
                    [/primary_unit]
                [/fire_event]
            [/case]
            [case]
                value=1
                [fire_event]
                    name=gladiator_truthers_and_liers
                    [primary_unit]
                        id=$unit.id|
                    [/primary_unit]
                [/fire_event]
            [/case]
            [else]
                # there are no more puzzles you haven't solved. you just get a bit of dialog
                {VOADAR_MESSAGE unit (_"When we first came to this village, $$unit.id|.spouse| and I would spend every night out here... Now one of us must always stay to run the arena. Someday we'll retire, however, and then we will never leave each other's side again.")}
            [/else]
        [/switch]
    [/event]
    
    [event]
        name=gladiator_syllogisms
        id=gladiator_syllogisms
        first_time_only=no
        {VOADAR_MESSAGE unit (_"Truly marvellous, isn't it? The summer night sky? There are few things I enjoy more than staring upwards and losing myself in thought. Back in the tribe, we spent hours each night this way... and when the children became restless, we would challenge them with mind games to help them pass the time. Perhaps that is what I miss most, the puzzles we would muse over. Would you like to hear a few?")}
        {VARIABLE Voadar.bool_message (_"Listen to $unit.name|'s logic puzzles?")}
        [fire_event]
            name=Voadar_bool_responds
        [/fire_event]
        {IF_VAR Voadar.bool_response equals yes (
            [else]
                [return]
                [/return]
            [/else]
        )}
        {VOADAR_MESSAGE unit (_"Excellent! Tell me, do you know what a $d|syllogism$b| is?")}
        {VARIABLE Voadar.bool_message (_"Do you know what a syllogism is?")}
        [fire_event]
            name=Voadar_bool_responds
        [/fire_event]
        {IF_VAR Voadar.bool_response equals yes (
            [then]
                {VOADAR_MESSAGE unit (_"Ah, then perhaps this will be easy for you! I will list eight syllogisms, so just tell me which ones you think are valid. And just in case you really know syllogisms thoroughly, I'll warn you that they won't all be in standard form. Here is your first one:")}
            [/then]
            [else]
                {VOADAR_MESSAGE unit (_"I was not expecting you would. A syllogism is a set of two premises and a conclusion, like this:
    Some trees are oaks
    All oaks do not have leaves
    Therefore, some trees do not have leaves.")}
                {VOADAR_MESSAGE unit (_"Your goal, to solve the puzzle, is to decide whether the conclusion is proven true by the two premises. It is important that it does not matter whether the premises or the conclusion are actually true! To solve the syllogism, you must assume, or even pretend, that the premises are true! Then the syllogism is valid if and only if the conclusion <i>must</i> be true if the premises are. For example, the syllogism I told you before is valid even though one of the premises obviously had no basis in reality.")}
                {VOADAR_MESSAGE unit (_"Here is another example:
    Some philosophers are friendly
    Not all friendly people smile
    Therefore, some philosophers do not smile.
This example is invalid because, although it is given that some friendly people do not smile, it is possible that none of those people are philosophers. In other words, we know there is a group of people who are both friendly and are philosophers, and we know there is a group who are friendly but do not smile. But there may be no overlap between those groups, so it is possible that all philosophers smile. Therefore the conclusion might not be true, so the syllogism is invalid.")}
                {VOADAR_MESSAGE unit (_"Let us begin! I will list eight syllogisms, so tell me which ones you think are valid! Here is your first one:")}
            [/else]
        )}
        [set_variables]
            name=gladiators.syllogisms_copy
            mode=replace
            to_variable=gladiators.syllogisms
        [/set_variables]
        [set_variables]
            name=gladiators.terms_copy
            mode=replace
            to_variable=gladiators.major_terms
        [/set_variables]
        {VARIABLE gladiators.question_count 0}
        [repeat] 
            times=8
            [do]
                {VARIABLE_OP gladiators.question_count add 1}
                [set_variable]
                    name=gladiators.syllo_index
                    rand=1..$gladiators.syllogisms_copy.length|
                [/set_variable]
                {VARIABLE_OP gladiators.syllo_index sub 1}
                [set_variable]
                    name=gladiators.term_index
                    rand=1..$gladiators.terms_copy.length|
                [/set_variable]
                {VARIABLE_OP gladiators.term_index sub 1}
                {VOADAR_MESSAGE unit (_"Number $gladiators.question_count|: 
$gladiators.syllogisms_copy[$gladiators.syllo_index|].major_prefix|$gladiators.terms_copy[$gladiators.term_index|].term|$gladiators.syllogisms_copy[$gladiators.syllo_index|].major_suffix|
$gladiators.syllogisms_copy[$gladiators.syllo_index|].minor|
$gladiators.syllogisms_copy[$gladiators.syllo_index|].conclusion_prefix|$gladiators.terms_copy[$gladiators.term_index|].term|$gladiators.syllogisms_copy[$gladiators.syllo_index|].conclusion_suffix|")}
                [+message]
                    [option]
                        label="Valid"
                        [command]
                            {VARIABLE gladiators.response yes}
                        [/command]
                    [/option]
                    [option]
                        label="Invalid"
                        [command]
                            {VARIABLE gladiators.response no}
                        [/command]
                    [/option]
                [/message]
                {IF_VAR gladiators.response equals $gladiators.syllogisms_copy[$gladiators.syllo_index|].is_valid| (
                    [then]
                        {VOADAR_MESSAGE unit (_"Correct!")}
                    [/then]
                    [else]
                        {VOADAR_MESSAGE unit (_"Incorrect. No worries, no one catches onto syllogisms too quickly. Perhaps I'll see you at the arena tomorrow? Unless you'd like to keep solving syllogisms...")}
                        [fire_event]
                            name=clean_up_syllogisms
                        [/fire_event]
                        [return]
                        [/return]
                    [/else]
                )}
                {CLEAR_VARIABLE gladiators.syllogisms_copy[$gladiators.syllo_index|]}
                {CLEAR_VARIABLE gladiators.terms_copy[$gladiators.term_index|]}
            [/do]
        [/repeat]
        # if you get out of the loop without [return]ing, you passed the quiz!
        {VOADAR_MESSAGE unit (_"I'm impressed, Voadar! You seem to have mastered syllogisms quite well! You should be proud; In my experience, a sharp mind is often a better asset than a sharp sword. This kind of $d|experience$b| is well worth your time!")}
        [modify_unit]
            [filter]
                id=Voadar
            [/filter]
            [effect]
                apply_to=experience
                increase=16
            [/effect]
        [/modify_unit]
        # store and unstore to trigger possible advancement
        {VOADAR_STORE_UNIT Voadar no}
        [unstore_unit]
            variable=Voadar.unit
            advance=yes
            fire_event=yes
            animate=yes
        [/unstore_unit]
        [fire_event]
            name=clean_up_syllogisms
        [/fire_event]
        {VARIABLE_OP gladiators.puzzles_solved add 1}
        {CLEAR_VARIABLE gladiators.syllogisms}
        {CLEAR_VARIABLE gladiators.major_terms}
        {VOADAR_REMOVE_EVENT clean_up_syllogisms}
        {VOADAR_REMOVE_EVENT gladiator_syllogisms}
    [/event]
    [event]
        name=clean_up_syllogisms
        id=clean_up_syllogisms
        first_time_only=no
        {CLEAR_VARIABLE gladiators.syllogisms_copy}
        {CLEAR_VARIABLE gladiators.terms_copy}
        {CLEAR_VARIABLE gladiators.syllo_index}
        {CLEAR_VARIABLE gladiators.term_index}
        [modify_unit]
            [filter]
                id=Voadar
            [/filter]
            moves=0
        [/modify_unit]
    [/event]
    
    [event]
        name=gladiator_truthers_and_liers
        id=gladiator_truthers_and_liers
        first_time_only=no
        {VOADAR_MESSAGE unit (_"You are a clever fellow, Voadar. I have not met many who could understand syllogisms so well. You remind me of our child...")}
        {VOADAR_MESSAGE unit (_"...but there were other kinds of puzzles as well. Would you like to try some more?")}
        {VARIABLE Voadar.bool_message (_"Listen to $unit.name|'s logic puzzles?")}
        [fire_event]
            name=Voadar_bool_responds
        [/fire_event]
        {IF_VAR Voadar.bool_response equals yes (
            [else]
                [return]
                [/return]
            [/else]
        )}
        # there is no randomness in this one, it is the same every time.
        {VOADAR_MESSAGE unit (_"Excellent! Let us try some detective work. I will give you some number of witnesses, and each one will make one claim about which witnesses (possibly including his or her self) are telling the truth or lying. For a simple example, suppose:
    Witness 1 says 'Witness 2 is lying.'
    Witness 2 says 'Both of us are telling the truth.'
From those two statements, you can logically conclude that witness 1 is telling the truth and witness 2 is lying; it's the only way that their stories can make sense.")}
        {VOADAR_MESSAGE unit (_"There are two other rules, but they are quite simple:
    1) The witnesses are never confused or mistaken. Each one is either telling the truth and is correct, or is deliberately lying.
    2) I won't give you any puzzles that are impossible to solve.
I'll begin with some easy ones, but they will get harder.")}
#define VOADAR_WRONG_PUZZLE_OPTION LABEL
    [option]
        label={LABEL}
        [command]
            {VOADAR_MESSAGE unit (_"Sorry, that's not right. If you are trying to solve everything in your head, perhaps you should try again, and this time make some notes for yourself.")}
            [return]
            [/return]
        [/command]
    [/option]
#enddef
#define VOADAR_RIGHT_PUZZLE_OPTION LABEL
    [option]
        label={LABEL}
    [/option]
#enddef
        [message]
            speaker=unit
            message=_"First: 
    Witness 1 says 'Either both of us are lying or both of us are telling the truth.'
    Witness 2 says 'Exactly one of us is lying.'
Who is telling the truth?"
            {VOADAR_WRONG_PUZZLE_OPTION (_"Neither")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"Only 1")}
            {VOADAR_RIGHT_PUZZLE_OPTION (_"Only 2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"Both")}
        [/message]
        [message]
            speaker=unit
            message=_"That's right! Now try one with an extra witness: 
    Witness 1 says 'At least one of us is telling the truth.'
    Witness 2 says 'Either 1 is lying or 3 is lying (or both).'
    Witness 3 says 'Both 2 and 3 are telling the truth.'
Who is telling the truth?"
            {VOADAR_WRONG_PUZZLE_OPTION (_"None")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"3")}
            {VOADAR_RIGHT_PUZZLE_OPTION (_"1 and 2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"All")}
        [/message]
        [message]
            speaker=unit
            message=_"Very good. How about this one?
    Witness 1 says 'At least two of us are telling the truth.'
    Witness 2 says 'If 1 is telling the truth, then 3 is not.'
    Witness 3 says 'Either 1 or 2 is telling the truth (or both)'
Who is telling the truth?"
            {VOADAR_WRONG_PUZZLE_OPTION (_"None")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1 and 2")}
            {VOADAR_RIGHT_PUZZLE_OPTION (_"1 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"All")}
        [/message]
        [message]
            speaker=unit
            message=_"Correct again! This time you have four witnesses, but you already know that there is exactly one liar: 
    Witness 1 says '4 is telling the truth.'
    Witness 2 says '1 is lying.'
    Witness 3 says '2 is lying.'
    Witness 4 says '3 is telling the truth.'
Which one is the liar?"
            {VOADAR_WRONG_PUZZLE_OPTION (_"1")}
            {VOADAR_RIGHT_PUZZLE_OPTION (_"2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"4")}
        [/message]
        [message]
            speaker=unit
            message=_"You're doing well, Voadar! This is my hardest one:
    Witness 1 says 'If 2 is telling the truth, then 3 or 4 also is (or all three of them).'
    Witness 2 says '1 is telling the truth and so is 3 or 4 (or all three of them).'
    Witness 3 says 'If 4 is telling the truth, then 2 is not.'
    Witness 4 says 'Either I am telling the truth, or both 1 and 2 are (or all three of us).'
Who is telling the truth?"
            {VOADAR_WRONG_PUZZLE_OPTION (_"None")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1 and 2")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1 and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2 and 3")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2 and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"3 and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1, 2, and 3")}
            {VOADAR_RIGHT_PUZZLE_OPTION (_"1, 2, and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"1, 3, and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"2, 3, and 4")}
            {VOADAR_WRONG_PUZZLE_OPTION (_"All")}
        [/message]
		# if you make it this far without one of the options [return]ing, you win!
		{VOADAR_MESSAGE unit (_"That's correct. Most impressive!")}
        [modify_unit]
            [filter]
                id=Voadar
            [/filter]
            [effect]
                apply_to=experience
                increase=16
            [/effect]
        [/modify_unit]
        # store and unstore to trigger possible advancement
        {VOADAR_STORE_UNIT Voadar no}
        [unstore_unit]
            variable=Voadar.unit
            advance=yes
            fire_event=yes
            animate=yes
        [/unstore_unit]
		{VOADAR_MESSAGE unit (_"There was only one other who solved my puzzles so quickly... our daughter. <i>(Looks down sadly)</i>")}
		{VOADAR_MESSAGE unit (_"She reminded me so much of $$unit.id|.spouse|, with her sharp eyes and quick wit. But she was taken from us in a battle... killed by a masked soldier. Voadar, I want to thank you for your time out here! You have brought back so many fond memories. Here, take this charm. It is the symbol of my tribe, and any elf you show it to will know you are a friend.")}
		[message]
			speaker=narrator
			image=icons/jewelry_butterfly_pin.png
			message=_"Necklaces identical or similar to this one are worn by the youth of most elf tribes. It is well-crafted, and has a very $d|memorable$b| design."
		[/message]
		{VARIABLE Voadar.inventory.charm yes}
		{VOADAR_REMOVE_EVENT gladiator_truthers_and_liers}
        {VARIABLE_OP gladiators.puzzles_solved add 1}
		{VARIABLE gladiators.quest_complete yes}
    [/event]
    
    [event]
        name=start
        id=gladiators_init_syllogisms
        # here we store a bunch of variables containing the data for various syllogisms
        # this lets the mini-game be a bit random
#define VOADAR_STORE_SYLLOGISM MAJOR_PREFIX MAJOR_SUFFIX MINOR CONCLUSION_PREFIX CONCLUSION_SUFFIX IS_VALID
    [set_variables]
        name=gladiators.syllogisms
        mode=append
        [value]
            major_prefix={MAJOR_PREFIX}
            major_suffix={MAJOR_SUFFIX}
            minor={MINOR}
            conclusion_prefix={CONCLUSION_PREFIX}
            conclusion_suffix={CONCLUSION_SUFFIX}
            is_valid={IS_VALID}
        [/value]
    [/set_variables]
#enddef
        {VOADAR_STORE_SYLLOGISM "All " " are not good at math" "Nothing that is good at math likes fishing" "Therefore, no " " like fishing." no}
        {VOADAR_STORE_SYLLOGISM "No " " are afraid of spiders" "Some children are afraid of spiders" "Therefore, some children are not " "." yes}
        {VOADAR_STORE_SYLLOGISM "No carpenters are " "" "Some carpenters are male" "Therefore, some males are not " "." yes}
        {VOADAR_STORE_SYLLOGISM "All " " are not honest" "No mages are honest" "Therefore, all " " are mages." no}
        {VOADAR_STORE_SYLLOGISM "Some " " are insufferable" "Not all dwarves are insufferable" "Therefore, some dwarves are not " "." no}
        {VOADAR_STORE_SYLLOGISM "All citizens are " "" "Some fools are citizens" "Therefore, no fools are " "." no}
        {VOADAR_STORE_SYLLOGISM "All royalty are " "" "All kittens are royalty" "Therefore, all kittens are " "." yes}
        {VOADAR_STORE_SYLLOGISM "Some undead are not " "" "Some undead are not healthy" "Therefore, some " " are not healthy." no}
        {VOADAR_STORE_SYLLOGISM "All " " are sleep deprived" "All sleep deprived people are racist" "Therefore, all racist people are " "." no}
        {VOADAR_STORE_SYLLOGISM "No " " are balls of fluff" "Everything lovely is a ball of fluff" "Therefore, no " " are lovely." yes}
        {VOADAR_STORE_SYLLOGISM "Some " " need a shave" "No risk-takers need a shave" "Therefore, some risk-takers are not " "." no}
        {VOADAR_STORE_SYLLOGISM "All " " have headaches" "All snails have headaches" "Therefore, all " " are snails." no}
        {VOADAR_STORE_SYLLOGISM "Some signposts are " "" "Some signposts are arrows" "Therefore, some arrows are not " "." no}
        {VOADAR_STORE_SYLLOGISM "All musicians are " "" "Some musicians are elves" "Therefore, some elves are " "." yes}
        {VOADAR_STORE_SYLLOGISM "Some " " are not very wise" "Some owls are very wise" "Therefore, no " " are owls." no}
        {VOADAR_STORE_SYLLOGISM "Some " " have bad breath" "Everyone with bad breath should be looked down on" "Therefore, all " " should be looked down on." no}
        {VOADAR_STORE_SYLLOGISM "Some " " are syllogisms" "Some syllogisms do not make sense" "Therefore, some things that make sense are not " "." no}
        {VOADAR_STORE_SYLLOGISM "All hikers are " "" "Some goats are hikers" "Therefore, some goats are " "." yes}
        {VOADAR_STORE_SYLLOGISM "" " are life" "Life is a box of chocolates" "Therefore, some " " are not a box of chocolates" no}
        {VOADAR_STORE_SYLLOGISM "Not all " " are very realistic" "No painting is very realistic" "Therefore, no " " are paintings" no}
        {VOADAR_STORE_SYLLOGISM "All " " are egomaniacs" "Some blacksmiths are not egomaniacs" "Therefore, not all blacksmiths are not " "." yes}
        {VOADAR_STORE_SYLLOGISM "No " " are computer games" "Some computer games break the fourth wall" "Therefore, not all " " break the fourth wall." no}
#undef VOADAR_STORE_SYLLOGISM
#define VOADAR_SYLLOGISM_TERM TERM
    [value]
        term={TERM}
    [/value]
#enddef
        [set_variables]
            name=gladiators.major_terms
            mode=replace
            {VOADAR_SYLLOGISM_TERM "politicians"}
            {VOADAR_SYLLOGISM_TERM "trolls"}
            {VOADAR_SYLLOGISM_TERM "students"}
            {VOADAR_SYLLOGISM_TERM "mosquitoes"}
            {VOADAR_SYLLOGISM_TERM "professionals"}
            {VOADAR_SYLLOGISM_TERM "teenagers"}
            {VOADAR_SYLLOGISM_TERM "geniuses"}
            {VOADAR_SYLLOGISM_TERM "ambitious people"}
            {VOADAR_SYLLOGISM_TERM "gladiators"}
            {VOADAR_SYLLOGISM_TERM "philosophies"}
            {VOADAR_SYLLOGISM_TERM "elephants"}
            {VOADAR_SYLLOGISM_TERM "goblins"}
            {VOADAR_SYLLOGISM_TERM "thieves"}
            {VOADAR_SYLLOGISM_TERM "hamsters"}
            {VOADAR_SYLLOGISM_TERM "alcoholics"}
            {VOADAR_SYLLOGISM_TERM "humans"}
            {VOADAR_SYLLOGISM_TERM "whales"}
            {VOADAR_SYLLOGISM_TERM "sailors"}
            {VOADAR_SYLLOGISM_TERM "cobblers"}
        [/set_variables]
#undef VOADAR_SYLLOGISM_TERM
    [/event]
    
[/unit_type]
