#textdomain wesnoth-voadar

# IMPORTANT IMPORTANT IMPORTANT
# Because of preprocessing reasons, it is a good idea to keep macros and events-utils separate. 
# However, there are some macros that really depend on the variables and conditions managed by the events in this file.
# They are in in utils/macros/voadar_macros.cfg and you MUST NOT CHANGE THIS FILE without looking at those macros;
# if you update this file, make sure those macros stay up-to-date as well.

################################ Create conversation options
# Voadar.list_of_characters.entries will be populated with character names 
# (by each character in it's unit file, there is a macro for this in
# utils/macros/voadar_macros.cfg). Now we must use that list to allow voadar
# to start conversations with each of them
#
# All characters will use a start event to append to Voadar.list_of_characters.entries
# we will eventually use that array to filter the units Voadar can talk with
# but first, we must put something to start that array, so they can append:
[event]
	name=prestart
	id=prepare_character_list
	{VARIABLE Voadar.list_of_characters.entries.id dummy}
[/event]
# in this event, all start events will be finished, so Voadar.list_of_characters.entries
# contains all relevant ids. no we will join the entries into one comma separated list 
# that can be used in filters:
[event]
	name=turn 1
	id=conversation_option_setter
	# remove the dummy that we initialized the list with:
	{CLEAR_VARIABLE Voadar.list_of_characters.entries[0]}
	# and join the rest:
	[set_variable]
		name=Voadar.list_of_characters.complete_list
		[join]
			variable=Voadar.list_of_characters.entries
			key=id
			separator=","
			#there should be no empties, but why not include this:
			remove_empty=yes
		[/join]
	[/set_variable]
	# we have the list, so we can remove the array (to make ;inspect look nicer)
	{CLEAR_VARIABLE Voadar.list_of_characters.entries}
	# finally, make the menu option:
	[set_menu_item]
		id=main_conversation_option
		description=_"Talk"
		image=buttons/WML-custom.png
		[default_hotkey]
			key=e
		[/default_hotkey]
		[show_if]
			[have_unit]
				x,y=$x1|,$y1
				id=$Voadar.list_of_characters.complete_list|
				[filter_adjacent]
					id=Voadar
				[/filter_adjacent]
			[/have_unit]
		[/show_if]
		[command]
			# every unit that has a conversation should have a container variable named identically to the unit's id
			# inside should be a variable named "conversation"
			#   which holds the name of the event that currently represents this unit's conversation.
			# hence:
			[store_unit]
				[filter]
					x,y=$x1|,$y1|
				[/filter]
				variable=Voadar.next_convo
			[/store_unit]
			[fire_event]
				name=$$Voadar.next_convo.id|.conversation|
				[primary_unit]
					id=$Voadar.next_convo.id|
				[/primary_unit]
			[/fire_event]
			{CLEAR_VARIABLE Voadar.next_convo}
		[/command]
	[/set_menu_item]
[/event]

################################ Voadar's Responses
# There are four possible responses, numbered 1-4, in order of friendliness.
# The latest response is always stored in Voadar.response
[event]
	name=Voadar_responds
	id=Voadar_responds
	first_time_only=no
	[message]
		speaker=Voadar
		[option]
			label=_"Yip happily"
			[command]
				{VARIABLE Voadar.response 1}
				[sound]
					name=wolf-die-1.ogg
				[/sound]
			[/command]
		[/option]
		[option]
			label=_"Bark inquisitively"
			[command]
				{VARIABLE Voadar.response 2}
				[sound]
					name=wolf-hit-1.ogg
				[/sound]
			[/command]
		[/option]
		[option]
			label=_"Stay silent"
			[command]
				{VARIABLE Voadar.response 3}
			[/command]
		[/option]
		[option]
			label=_"Growl angrily"
			[command]
				{VARIABLE Voadar.response 4}
				[sound]
					name=drake-hit-2.ogg
				[/sound]
			[/command]
		[/option]
	[/message]
[/event]
# There is also this option for yes-or-no responses
# so as to no be confused with the normal responses, response is stored in Voadar.bool_response
# Also, if Voadar.bool_message is set, this displays the text in it. Use this to make it clear what
# yes or no means.
[event]
	name=Voadar_bool_responds
	id=Voadar_bool_responds
	first_time_only=no
	[message]
		speaker=Voadar
		message=$Voadar.bool_message|
		[option]
			label=_"Yes (nod head)"
			[command]
				{VARIABLE Voadar.bool_response yes}
				[sound]
					name=wolf-die-1.ogg
				[/sound]
			[/command]
		[/option]
		[option]
			label=_"No (shake head)"
			[command]
				{VARIABLE Voadar.bool_response no}
				[sound]
					name=wolf-growl-3.ogg
				[/sound]
			[/command]
		[/option]
	[/message]
[/event]

##############################################################
# The inventory
##############################################################
# SO
# Items can be "used," for example, eating food
# or they can be "showed," like showing someone Cadameron's hat.
# Without exception, items are "used" when right-clicking Voadar
# and they're "showed" when right-clicking another character.

# Other files (particularly utility_items.cfg) can make things happen when items 
# are showed or used by making use of [event] name=<use/show>_<relevant_item_name>
# but for item showings, be sure to [filter] for the unit it is 
# being shown to. There is a macro for this in utils/macros/voadar_macros.cfg.

# First, a macro for basic inventory options:
# {PRIMARY_UNIT} should be a unit id. it's used for giving subsequent events something to filter against
# (ie the primary unit is the one being show the item)
# Further, this option will only be show if ${PRIMARY_UNIT}.item_list| contains {ID}
#define VOADAR_INVENTORY_OPTION MESSAGE ID CONDITION_KEY CONDITION_VALUE USE_OR_SHOW PRIMARY_UNIT
	[option]
		label={MESSAGE}
		[show_if]
			[variable]
				name=Voadar.inventory.{ID}
				{CONDITION_KEY}={CONDITION_VALUE}
			[/variable]
			[variable]
				name={PRIMARY_UNIT}.item_list
				contains={ID}
			[/variable]
		[/show_if]
		[command]
			[fire_event]
				name={USE_OR_SHOW}_{ID}
				[primary_unit]
					id={PRIMARY_UNIT}
				[/primary_unit]
			[/fire_event]
		[/command]
	[/option]
#enddef

# Now, the actual definition for the inventory:
# it is a macro so that I can easily use the same code for showing items and using them
# {PRIMARY_UNIT} is the id of the unit being show the item 
# (or Voadar if this is "use item" instead of "show item")
#define VOADAR_COMPLETE_INVENTORY_MESSAGE USE_OR_SHOW PRIMARY_UNIT
	[message]
		speaker=Voadar
		message=_"Which item do you want?"
		[option]
			label=_"Cancel"
			[command]
				{VARIABLE Voadar.show_useless_message no}
			[/command]
		[/option]
		{VOADAR_INVENTORY_OPTION (_"Wood-cutting axe") axe equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Cadameron's bloody hat") hat equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Chunk of meat - Eat to restore 25 HP - $Voadar.inventory.meat| left") meat greater_than 0 {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Fish - Eat to restore 12 HP and cure Poison - $Voadar.inventory.fish| left") fish greater_than 0 {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Mug of ale - Drink to restore 5 HP - $Voadar.inventory.ale| left") ale greater_than 0 {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Herb bag - $Voadar.inventory.herb_bag| left") herb_bag greater_than -1 {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"King crab carapace - $Voadar.inventory.carapace| left") carapace greater_than 0 {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Stolen goods - $Voadar.stolen_goods.common| common thefts and $Voadar.stolen_goods.rare| rare thefts") stolen_goods equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Bear claws") bear_claws equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Elvish necklace") charm equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Sword") sword equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Letter for $Voadar.letter_recipient|") letter equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Fishing net") net equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
		{VOADAR_INVENTORY_OPTION (_"Earmuffs") earmuffs equals yes {USE_OR_SHOW} {PRIMARY_UNIT}}
	[/message]
#enddef

[event]
	name=prestart
	id=inventory_menu_options
	[set_menu_item]
		id=use_inventory
		description=_"Use item"
		image=buttons/WML-custom.png
		[default_hotkey]
			key=q
		[/default_hotkey]
		[show_if]
			[variable]
				name=Voadar.allow_inventory
				equals=yes
			[/variable]
		[/show_if]
		[command]
			{VARIABLE Voadar.show_useless_message yes}
			# IMPORTANT: events that result from "use item", for example, healing from eating food,
			# must change the above variable to no or a message will display, saying that the item was useless
			{VOADAR_COMPLETE_INVENTORY_MESSAGE use Voadar}
			# Say that the item was useless if appropriate
			[message]
				[show_if]
					[variable]
						name=Voadar.show_useless_message
						equals=yes
					[/variable]
				[/show_if]
				speaker=narrator
				image=wesnoth-icon.png
				message=_"That item doesn't do anything here. If you meant to show it to someone instead of trying to use it, make sure you right-click someone else, not yourself."
			[/message]
		[/command]
	[/set_menu_item]

	[set_menu_item]
		id=show_inventory
		description=_"Show item"
		image=buttons/WML-custom.png
		[default_hotkey]
			key=w
		[/default_hotkey]
		[show_if]
			[have_unit]
				x,y=$x1|,$y1|
				id=$Voadar.list_of_characters.complete_list|
				[filter_adjacent]
					id=Voadar
				[/filter_adjacent]
			[/have_unit]
			[variable]
				name=Voadar.allow_inventory
				equals=yes
			[/variable]
		[/show_if]
		[command]
			# the following macro needs to know the relevant unit's id, not just location:
			[store_unit]
				[filter]
					x,y=$x1|,$y1|
				[/filter]
				variable=Voadar.show_to
				kill=no
			[/store_unit]
			{VOADAR_COMPLETE_INVENTORY_MESSAGE show $Voadar.show_to.id|}
			{CLEAR_VARIABLE Voadar.show_to}
		[/command]
	[/set_menu_item]
[/event]

#undef VOADAR_COMPLETE_INVENTORY_MESSAGE
#undef VOADAR_INVENTORY_OPTION

#############################################################
# Next, initialize inventory items:
#############################################################

[event]
	name=prestart
	id=prepare_voadar_event_variables
	# by default of course you can use/show items, but it will be disallowed at certain times:
	{VARIABLE Voadar.allow_inventory yes}
	
	# Just in case, these get a default value (which should never be used):
	{VARIABLE Voadar.response 0}
	{VARIABLE Voadar.bool_response no}
	
	# Tracking skill isn't exactly part of the inventory, but this is still the best place to initialize it:
	{VARIABLE Voadar.can_track no}
	
	# A list of items that can be show to Voadar 
	#(in other words, the items you can use in "use item")
	#(in other words, all the items)
	{VARIABLE Voadar.item_list hat,meat,ale,fish,carapace,stolen_goods,bear_claws,sword,letter,axe,earmuffs,net,charm,herb_bag}
	
	# and here are the standard items:
	{VARIABLE Voadar.inventory.axe no}
	{VARIABLE Voadar.inventory.hat no}
	{VARIABLE Voadar.inventory.earmuffs no}
	{VARIABLE Voadar.inventory.bear_claws no}
	{VARIABLE Voadar.inventory.sword no}
	{VARIABLE Voadar.inventory.charm no}
	{VARIABLE Voadar.inventory.net no}
	{VARIABLE Voadar.inventory.meat 0}
	{VARIABLE Voadar.inventory.ale 0}
	{VARIABLE Voadar.inventory.fish 0}
	{VARIABLE Voadar.inventory.carapace 0}
	
	# the herb bag is unusual, -1 signifies you don't have one,
	# 0-24 signifies the amount of uses left until it's empty (when you still have one, you can show it to people, but it can't heal you anymore)
	{VARIABLE Voadar.inventory.herb_bag -1}
	
	# stolen_goods are also unusual: there is one variable to say whether we have any,
	# and two others to tell how many we have of each type ("common" and "rare")
	{VARIABLE Voadar.inventory.stolen_goods no}
	{VARIABLE Voadar.stolen_goods.rare 0}
	{VARIABLE Voadar.stolen_goods.common 0}
	
	# letters are just a little unusual; once you get one, you never "lose" it, you just trade for a different letter
	# so instead of changing Voadar.inventory.letter, just change Voadar.letter_recipient
	{VARIABLE Voadar.inventory.letter no}
	# default recipient is the farmers:
	{VARIABLE Voadar.letter_recipient "the farmers"}
[/event]

# the net is most different of all; while you have it you get an extra attack
# so other files can't simply change a variable in Voadar.inventory, they must call these events:
[event]
	name=got_net
	first_time_only=no
	{VARIABLE Voadar.inventory.net yes}
	[modify_unit]
		[filter]
			id=Voadar
		[/filter]
		[effect]
			apply_to=new_attack
			name=net
			description=_"net"
			type=impact
			[specials]
				{WEAPON_SPECIAL_SLOW}
			[/specials]
			damage=4
			number=3
			range=ranged
			icon=attacks/net.png
		[/effect]
	[/modify_unit]
[/event]
[event]
	name=lost_net
	first_time_only=no
	{VARIABLE Voadar.inventory.net no}
	[modify_unit]
		[filter]
			id=Voadar
		[/filter]
		[effect]
			apply_to=remove_attacks
			name=net
		[/effect]
	[/modify_unit]
[/event]

# Clear all variables related to events in this file
[event]
	name=victory
	id=clear_voadar_event_variables
	{CLEAR_VARIABLE Voadar}
[/event]
