#textdomain wesnoth-voadar

# This file contains the bunny mini-game

#IMPORTANT
# This mini_game should only be called from the forest
# But it only causes very small problems if you call it from other out-door areas
# call it from indoors at your own risk

{VOADAR_CREATE_CONVERSATION_OPTION bunny_maple}

########################################
# Bunny game begins here
########################################
[event]

	name=bunny_mini_game
	id=bunny_mini_game
	first_time_only=no
	
	######## First, some simple tasks for starting the game (making sure everyone gets to where they should be, etc)
	# Make a copy of Maple to run the mini-game while the other goes on about her normal schedule
	{VOADAR_STORE_UNIT Maple no}
	{VARIABLE Maple.unit.id bunny_maple}
	[unstore_unit]
		variable=Maple.unit
		x,y=97,35
	[/unstore_unit]
	# since voadar was in the forest, he has relatively short vision. But there should be no fog/shroud in the minigame
	[fire_event]
		id=increase_vision_after_forest
	[/fire_event]
	{TELEPORT_UNIT (id=Voadar) 92 12}
	[fire_event]
		name=moveto
		# This acts as if Voadar had just entered a door 
		# (He gets the infinite moves and the fog/shroud updates, etc)
		[primary_unit]
			id=Voadar
		[/primary_unit]
	[/fire_event]
	[modify_side]
		side=1
		fog=no
	[/modify_side]
	# These are the bunnies that will race:
	{GENERIC_UNIT 2 "Rabbit" 94 33}[+unit]
		name=_"Flopsy"
		id=Flopsy
		variation=white
	[/unit]
	{GENERIC_UNIT 2 "Rabbit" 95 33}[+unit]
		name=_"Foo-Foo"
		id=Foo_foo
		variation=brown
	[/unit]
	{GENERIC_UNIT 2 "Rabbit" 96 33}[+unit]
		name=_"Boom-Jun"
		id=Boom_jun
		variation=none
	[/unit]
	[modify_unit]
		# These rabbits should have no attacks
		[filter]
			type=Rabbit
			x=94-96
			y=33
		[/filter]
		[effect]
			apply_to=remove_attacks
			name="gnaw"
		[/effect]
	[/modify_unit]
	# and they each get an "energy" value. basically this determines the 
	# bunny's likely hood of winning. It's used in calculating their moves per turn
	[set_variable]
		name=bunnies.Flopsy.energy
		rand=2..4
	[/set_variable]
	[set_variable]
		name=bunnies.Foo_foo.energy
		rand=2..4
	[/set_variable]
	[set_variable]
		name=bunnies.Boom_jun.energy
		rand=2..4
	[/set_variable]
	# Finally, Maple explains what's going on
	{IF_VAR Maple.Voadar_played_bunny_game_yet equals yes (
		[then]
			{VOADAR_MESSAGE bunny_maple (_"<i>(Laughs)</i> You know what to do! Go see how the bunnies are $d|feeling,$b| and talk to me when you think you know which one will win.")}
		[/then]
		[else]
			{VOADAR_MESSAGE bunny_maple (_"These three little bunnies are friends of mine. Aren't they cute? They love $d|racing$b| each other around this part of the forest. How would you like to $d|bet$b| on which one wins? Just go take a look at them, and talk to me when you're ready to bet.")}
		[/else]
	)}
	[objectives]
		side=1
		[objective]
			description= _ "Talk with the bunnies to see which one you think will win"
			condition=win
		[/objective]
		[objective]
			description= _ "Talk to Maple and tell her your choice"
			condition=win
		[/objective]
	[/objectives]
	[show_objectives]
	[/show_objectives]
	# You can tell how much "energy" each bunny has by talking to it:
	{VARIABLE bunny_maple.conversation Maple_conversation_make_bet}
	{VARIABLE Flopsy.conversation bunny_conversation_energy_$bunnies.Flopsy.energy|}
	{VARIABLE Foo_foo.conversation bunny_conversation_energy_$bunnies.Foo_foo.energy|}
	{VARIABLE Boom_jun.conversation bunny_conversation_energy_$bunnies.Boom_jun.energy|}
	
	######## At this point, control returns to Voadar. The rest of the game is controlled by the following events.
	
	# to continue the mini-game, you should talk with maple:
	[event]
		name=Maple_conversation_make_bet
		id=Maple_conversation_make_bet
		first_time_only=no
		[message]
			speaker=bunny_maple
			message=_"So which one do you think is going to be fastest today?"
			[option]
				label=_"Don't answer (keep thinking)"
			[/option]
			[option]
				label=_"Point to Flopsy"
				[command]
					{VARIABLE bunnies.choice Flopsy}
					{VARIABLE bunnies.choice_name "Flopsy"}
					[fire_event]
						name=Maple_conversation_make_bet_continue
					[/fire_event]
				[/command]
			[/option]
			[option]
				label=_"Point to Foo-Foo"
				[command]
					{VARIABLE bunnies.choice Foo_foo}
					{VARIABLE bunnies.choice_name "Foo-Foo"}
					[fire_event]
						name=Maple_conversation_make_bet_continue
					[/fire_event]
				[/command]
			[/option]
			[option]
				label=_"Point to Boom-Jun"
				[command]
					{VARIABLE bunnies.choice Boom_jun}
					{VARIABLE bunnies.choice_name "Boom-Jun"}
					[fire_event]
						name=Maple_conversation_make_bet_continue
					[/fire_event]
				[/command]
			[/option]
		[/message]
	[/event]
	[event]
		name=Maple_conversation_make_bet_continue
		id=Maple_conversation_make_bet_continue
		first_time_only=no
		[message]
			speaker=bunny_maple
			message=_"And how much would you like to bet? If $bunnies.choice_name| wins, I have to pay you back $d|double!$b|"
			[option]
				label=_"1 gold"
				[command]
					{VOADAR_IF_GOLD 1 (
						[then]
							{VOADAR_MESSAGE bunny_maple (_"Just a friendly, low-risk game? Sounds fun!")}
							{VARIABLE bunnies.bet 1}
							[gold]
								side=1
								amount=-1
							[/gold]
							[fire_event]
								name=bunnies_start_race
							[/fire_event]
						[/then]
						[else]
							[fire_event]
								name=bunnies_not_enough_gold
							[/fire_event]
						[/else]
					)}
				[/command]
			[/option]
			[option]
				label=_"10 gold"
				[command]
					{VOADAR_IF_GOLD 10 (
						[then]
							{VOADAR_MESSAGE bunny_maple (_"Sounds great! Bets always make the race more interesting.")}
							{VARIABLE bunnies.bet 10}
							[gold]
								side=1
								amount=-10
							[/gold]
							[fire_event]
								name=bunnies_start_race
							[/fire_event]
						[/then]
						[else]
							[fire_event]
								name=bunnies_not_enough_gold
							[/fire_event]
						[/else]
					)}
				[/command]
			[/option]
			[option]
				label=_"30 gold"
				[command]
					{VOADAR_IF_GOLD 30 (
						[then]
							{VOADAR_MESSAGE bunny_maple (_"Wow! You're a big risk taker, I see. <i>(Laughs)</i> Well honey, you better hope that bunny runs hard!")}
							{VARIABLE bunnies.bet 30}
							[gold]
								side=1
								amount=-30
							[/gold]
							[fire_event]
								name=bunnies_start_race
							[/fire_event]
						[/then]
						[else]
							[fire_event]
								name=bunnies_not_enough_gold
							[/fire_event]
						[/else]
					)}
				[/command]
			[/option]
		[/message]
	[/event]
	# If you didn't have as much gold as you tried to bet:
	[event]
		name=bunnies_not_enough_gold
		id=bunnies_not_enough_gold
		first_time_only=no
		{VOADAR_MESSAGE bunny_maple (_"Aw, honey! You can't bet more than you actually have! Oh well, come play some other time.")}
		[fire_event]
			name=bunny_game_over
		[/fire_event]
	[/event]
	# If you successfully place a bet:
	[event]
		name=bunnies_start_race
		id=bunnies_start_race
		first_time_only=no
		# she carefully explains the rules if this is your first time playing:
		{IF_VAR Maple.given_thorough_bunny_explanation not_equals yes (
			[then]
				{VOADAR_MESSAGE bunny_maple (_"The bunnies are racing to that flowery glade in the north, next to the big white tree. The first one to step on the flowers wins.  Oh, and here's what makes the race interesting: running through any thick forest is against the rules. They have to stick to the path, even when it goes through the creek!")}
				{SCROLL_TO 98 12}
				[delay]
					time=400
				[/delay]
			[/then]
			[else]
				# she usually just says this:
				{VOADAR_MESSAGE bunny_maple (_"You'd think that one bunny would win every time, wouldn't you? <i>(Laughs)</i> Well, how fast they run depends on how energetic they're $d|feeling.$b| When they're particularly competitive, sometimes they might even $d|stop$b| the other bunnies from getting past! Of course, you can never be too sure who'll win. <i>(Laughs again)</i> They're just bunnies after all! A lot of the race just comes down to $d|luck.$b|")}
			[/else]
		)}
		{VARIABLE Maple.given_thorough_bunny_explanation yes}
		{MOVE_UNIT (x,y=96,33) 93 33}
		{MOVE_UNIT (id=Voadar) 95 35}
		[modify_unit]
			[filter]
				type=Rabbit
				x=90-100
			[/filter]
			side=1
		[/modify_unit]
		[modify_unit]
			[filter]
				id=Voadar
			[/filter]
			side=2
		[/modify_unit]
		[modify_unit]
			# The bunnies can't move on forest any more
			[filter]
				type=Rabbit
				x=91-96
			[/filter]
			[effect]
				apply_to=movement_costs
				replace=yes
				[movement_costs]
					forest=99
				[/movement_costs]
			[/effect]
		[/modify_unit]
		[objectives]
			side=1
			[objective]
				description= _ "Move your bunny to the flowery glade before the others"
				condition=win
			[/objective]
			[objective]
				description=_"A different bunny wins the race"
				condition=lose
			[/objective]
		[/objectives]
		[show_objectives]
		[/show_objectives]
		[fire_event]
			name=bunnies_begin_race
		[/fire_event]
		[fire_event]
			name=bunnies_new_round
		[/fire_event]
		
		# If you end your turn, make sure the ais don't mess with the bunnies by switching
		# them to your side temporarily
		# then, when it's your turn again, treat it as though you had moved to the current tiles
		# so the other bunnies will move
		[event]
			name=side 1 turn end
			id=bunnies_end_turn
			first_time_only=no
			{VOADAR_STORE_UNIT Foo_foo no}
			{VOADAR_STORE_UNIT Boom_jun no}
			{VOADAR_STORE_UNIT Flopsy no}
			[modify_unit]
				[filter]
					x=91-100
					type=Rabbit
				[/filter]
				side=1
			[/modify_unit]
			[event]
				name=side 1 turn refresh
				[unstore_unit]
					variable=Foo_foo.unit
				[/unstore_unit]
				[unstore_unit]
					variable=Boom_jun.unit
				[/unstore_unit]
				[unstore_unit]
					variable=Flopsy.unit
				[/unstore_unit]
				[fire_event]
					id=bunnies_move_bunny
				[/fire_event]
			[/event]
		[/event]
	[/event]
	
	# From here on, the game relies on these two events:
	# bunnies_new_round, and bunnies_new_turn.
	#
	# Every time a bunny moves, bunnies_new_turn is fired; it prepares the game
	#	for the next bunny's turn.
	#	If it's the human's bunny's turn, it gives the human control; otherwise,
	#	it also moves the bunny.
	# The movement (whether from the human or the ai) causes bunnies_new_turn to 
	#  be fired again, which fires itself again, etc until all three bunnies have moved.
	#  When that's the case, it calls bunnies_new_round, to prepare the new round.
	#  Preparing a new round entails randomizing each bunny's movement points, chance
	#  of blocking other bunny's path, and order of movement
	
	# all this event does is create the two events that will control the rest of the mini-game
	[event]
		name=bunnies_begin_race
		id=bunnies_begin_race
		first_time_only=no
		
		[event]
			name=bunnies_new_round
			id=bunnies_new_round
			first_time_only=no
			##################################
			# Choose the movement order
			##################################
			# The next bunny to move is stored in bunnies.order[0].id
			# other bunnies that haven't moved this round are the remaining elements of the array
			# Since this is a new round, we need to set up bunnies.order
			[set_variable]
				name=bunnies.Flopsy.stat
				rand=1..20
			[/set_variable]
			[set_variable]
				name=bunnies.Foo_foo.stat
				rand=1..20
			[/set_variable]
			[set_variable]
				name=bunnies.Boom_jun.stat
				rand=1..20
			[/set_variable]
			# Some bunnies actually have a slight advantage over others, 
			# because I don't have a good tie breaking strategy
			{CLEAR_VARIABLE bunnies.order}
			[if]
				[variable]
					name=bunnies.Flopsy.stat
					greater_than_equal_to=$bunnies.Foo_foo.stat
				[/variable]
				[variable]
					name=bunnies.Flopsy.stat
					greater_than_equal_to=$bunnies.Boom_jun.stat
				[/variable]
				[then]
					{VARIABLE bunnies.order[0].id Flopsy}
					{IF_VAR bunnies.Foo_foo.stat greater_than $bunnies.Boom_jun.stat| (
						[then]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Foo_foo
								[/value]
								[value]
									id=Boom_jun
								[/value]
							[/set_variables]
						[/then]
						[else]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Boom_jun
								[/value]
								[value]
									id=Foo_foo
								[/value]
							[/set_variables]
						[/else]
					)}
				[/then]
			[/if]
			[if]
				[variable]
					name=bunnies.Foo_foo.stat
					greater_than=$bunnies.Flopsy.stat
				[/variable]
				[variable]
					name=bunnies.Foo_foo.stat
					greater_than_equal_to=$bunnies.Boom_jun.stat
				[/variable]
				[then]
					{VARIABLE bunnies.order[0].id Foo_foo}
					{IF_VAR bunnies.Boom_jun.stat greater_than_equal_to $bunnies.Flopsy.stat| (
						[then]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Boom_jun
								[/value]
								[value]
									id=Flopsy
								[/value]
							[/set_variables]
						[/then]
						[else]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Flopsy
								[/value]
								[value]
									id=Boom_jun
								[/value]
							[/set_variables]
						[/else]
					)}
				[/then]
			[/if]
			[if]
				[variable]
					name=bunnies.Boom_jun.stat
					greater_than=$bunnies.Flopsy.stat
				[/variable]
				[variable]
					name=bunnies.Boom_jun.stat
					greater_than=$bunnies.Foo_foo.stat
				[/variable]
				[then]
					{VARIABLE bunnies.order[0].id Boom_jun}
					{IF_VAR bunnies.Foo_foo.stat greater_than_equal_to $bunnies.Flopsy.stat| (
						[then]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Foo_foo
								[/value]
								[value]
									id=Flopsy
								[/value]
							[/set_variables]
						[/then]
						[else]
							[set_variables]
								name=bunnies.order
								mode=append
								[value]
									id=Flopsy
								[/value]
								[value]
									id=Foo_foo
								[/value]
							[/set_variables]
						[/else]
					)}
				[/then]
			[/if]
			##################################
			# Choose the movement points
			##################################
			# modifies the bunnies' max moves, but leaves their actual moves at 0
			# bunnies_new_turn gives them their moves back one at a time
			{VARIABLE bunnies.current_id Flopsy}
			# in the previous section, i just set the stats randomly.
			# this time, use this helper event:
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			# it sets them, but weighs in the bunnies "energy" so, even though the
			# stat is random, you can still have an advantage by choosing your bunny
			# wisely.
			{VARIABLE bunnies.current_id Foo_foo}
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			{VARIABLE bunnies.current_id Boom_jun}
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			[modify_unit]
				[filter]
					id=Flopsy
				[/filter]
				max_moves=$bunnies.Flopsy.stat
				moves=0
			[/modify_unit]
			[modify_unit]
				[filter]
					id=Foo_foo
				[/filter]
				max_moves=$bunnies.Foo_foo.stat
				moves=0
			[/modify_unit]
			[modify_unit]
				[filter]
					id=Boom_jun
				[/filter]
				max_moves=$bunnies.Boom_jun.stat
				moves=0
			[/modify_unit]
			##################################
			# Choose the competitiveness
			##################################
			# bunnies_new_turn will check the bunnies' stats to decide
			# which ones can block each other's movement
			{VARIABLE bunnies.current_id Flopsy}
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			{VARIABLE bunnies.current_id Foo_foo}
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			{VARIABLE bunnies.current_id Boom_jun}
			[fire_event]
				name=bunnies_random_stats
			[/fire_event]
			##################################
			# Start the bunnies moving
			##################################
			# All the stats are set up for the round,
			# so the first bunny can take its turn
			[fire_event]
				id=bunnies_move_bunny
			[/fire_event]
		[/event]
		
		# This is the event that actually moves the bunnies
		[event]
			name=moveto
			id=bunnies_move_bunny
			first_time_only=no
			[if]
				# If all the bunnies have already moved this round, we should start a new one
				[variable]
					# see if the variable is empty by comparing it to one that we know doesn't exist:
					name=bunnies.order[0].id
					equals=$this_variable_doesnt_really_exist|
				[/variable]
				[then]
					[fire_event]
						name=bunnies_new_round
					[/fire_event]
					# that's all, this event is finished
				[/then]
				[else]
					# If there is still at least one bunny that hasn't moved, lets move it.
					
					{VARIABLE bunnies.bunny_to_move $bunnies.order[0].id|}
					{CLEAR_VARIABLE bunnies.order[0]}
					# first, get bunnies on the correct team & correct movement points
					# only the one whose turn it is should have any moves
					[modify_unit]
						[filter]
							type=Rabbit
							x=90-100
						[/filter]
						side=1
						moves=0
						attacks_left=0
					[/modify_unit]
					[heal_unit]
						[filter]
							id=$bunnies.bunny_to_move|
						[/filter]
						amount=0
						animate=no
						moves=full
						restore_statuses=no
					[/heal_unit]
					{VARIABLE bunnies.current_id Flopsy}
					[fire_event]
						# this event set's the side of the bunny named by bunnies.current_id 
						# based on which bunny's turn it is to move, and on the bunnies' 
						# competitiveness (if one is particularly competitive, it is on a 
						# non-allied side and can block the others' movement)
						name=bunnies_set_team
					[/fire_event]
					{VARIABLE bunnies.current_id Foo_foo}
					[fire_event]
						name=bunnies_set_team
					[/fire_event]
					{VARIABLE bunnies.current_id Boom_jun}
					[fire_event]
						name=bunnies_set_team
					[/fire_event]
					# Behavior from here out is very different for the bunny that
					#   Voadar bet on (since the human controls it)
					[if]
						[variable]
							name=bunnies.bunny_to_move
							equals=$bunnies.choice|
						[/variable]
						[then]
							# If it's the human's turn, no need to do anything else. the human will 
							# move, triggering this event again as soon as he/she is finished
						[/then]
						[else]
							# Otherwise, we need to do the work of moving the bunny ourselves.
							# first, get a list of all the locations it can reach.
							[store_reachable_locations]
								[filter]
									id=$bunnies.bunny_to_move
								[/filter]
								range=movement
								moves=max
								variable=$bunnies.bunny_to_move|.locs
							[/store_reachable_locations]
							# we're going to search through those locations and save the one that's farthest north, 
							# (the race track was carfully designed that the farthest north tile is always the closest one to the goal)
							# but first we need a base value to compare them too. We'll use the bunny's current location:
							{VOADAR_STORE_UNIT $bunnies.bunny_to_move| no}
							# the "best so far" variable is stored in a variable named by the current bunny's id, so:
							{VARIABLE $bunnies.bunny_to_move|.destination.x $$bunnies.bunny_to_move|.unit.x|}
							{VARIABLE $bunnies.bunny_to_move|.destination.y $$bunnies.bunny_to_move|.unit.y|}
							# if, for example, $bunnies.bunny_to_move| is "Foo_foo", 
							# this will store the "best so far" coordinates in Foo_foo.destination.x and Foo_foo.destinatin.y
							# now then, we have no need for this anymore, clear it out:
							{CLEAR_VARIABLE $bunnies.bunny_to_move|.unit}
							
							# SO
							# now that we have a base case, so loop through all the tiles this bunny can reach to see which is actually the best:
							{FOREACH $bunnies.bunny_to_move|.locs i}
								#{DEBUG_MSG "Bunny's current destination is $$bunnies.bunny_to_move|.destination.x|,$$bunnies.bunny_to_move|.destination.y|. Should it change to $$bunnies.bunny_to_move|.locs[$i|].x|,$$bunnies.bunny_to_move|.locs[$i|].y|?"}
								# First, if the new tile's y is less than that of the old "best so far", 
								# it is farther north and a better location:
								{IF_VAR $bunnies.bunny_to_move|.locs[$i|].y less_than $$bunnies.bunny_to_move|.destination.y| (
									[then]
										# [store_reachable_locations] also returns occupied locations,
										# so we must double check that the tile is empty
										[if]
											[have_unit]
												x=$$bunnies.bunny_to_move|.locs[$i|].x|
												y=$$bunnies.bunny_to_move|.locs[$i|].y|
												count=0
											[/have_unit]
											[then]
												# now we are sure that it is a good tile. update the destination:
												{VARIABLE $bunnies.bunny_to_move|.destination.x $$bunnies.bunny_to_move|.locs[$i|].x|}
												{VARIABLE $bunnies.bunny_to_move|.destination.y $$bunnies.bunny_to_move|.locs[$i|].y|}
											[/then]
										[/if]
									[/then]
									[else]
										# if the new y is not greater, they could still be equal.
										# if they are, try to use one that has an odd x (since those are higher)
										{IF_VAR $bunnies.bunny_to_move|.locs[$i|].y equals $$bunnies.bunny_to_move|.destination.y| (
											[then]
												{VARIABLE bunnies.temp_x $$bunnies.bunny_to_move|.locs[$i|].x|}
												{VARIABLE_OP bunnies.temp_x modulo 2}
												{IF_VAR bunnies.temp_x equals 1 (
													[then]
														# Now we know that this is a good replacement for destination, unless
														# (like mentioned above) the tile is already taken by a different bunny
														[if]
															[have_unit]
																x=$$bunnies.bunny_to_move|.locs[$i|].x|
																y=$$bunnies.bunny_to_move|.locs[$i|].y|
																count=0
															[/have_unit]
															[then]
																# now we are sure that it is a good tile. update the destination:
																{VARIABLE $bunnies.bunny_to_move|.destination.x $$bunnies.bunny_to_move|.locs[$i|].x|}
																{VARIABLE $bunnies.bunny_to_move|.destination.y $$bunnies.bunny_to_move|.locs[$i|].y|}
															[/then]
														[/if]
													[/then]
												)}
												{CLEAR_VARIABLE bunnies.temp_x}
												# there could still be ties (both even or both odd) but if so
												# we just get what we get, it does not matter. They are equally high, after all.
											[/then]
										)}
									[/else]
								)}
							{NEXT i}
							# if you actually read and understood that loop, congrats
							# you're better at this than i am. those variable names are truly hideous.
							
							# $bunnies.bunny_to_move|.destination now holds the best reachable location
							[move_unit]
								id=$bunnies.bunny_to_move
								to_x=$$bunnies.bunny_to_move|.destination.x|
								to_y=$$bunnies.bunny_to_move|.destination.y|
								check_passability=yes
								# This movement is finished, so we can move the next bunny:
								fire_event=yes
							[/move_unit]
							# Although the movement is calculated correctly, taking into account that the
							#   bunnies can't move through forest, [move_unit] unfortunately still might animate them
							#   moving through it. The player could see this and think they are cheating.
							# The problem has been minimized by putting bad terrain (mostly swamp or water) underneath the
							#   forest tiles that the rabbits tended to short-cut through
						[/else]
					[/if]
				[/else]
			[/if]
		[/event]
		
		# This is a helper for bunnies_new_round
		# given a bunny id saved in bunnies.current_id, it adds a 
		# random number from 2-4 to the current bunny's energy and saves 
		# the result in bunnies.$bunnies.current_id|.stat
		[event]
			name=bunnies_random_stats
			id=bunnies_random_stats
			first_time_only=no
			[set_variable]
				name=bunnies.rand
				rand=0..4
			[/set_variable]
			{VARIABLE_OP bunnies.rand add $bunnies.$bunnies.current_id|.energy|}
			{CLEAR_VARIABLE bunnies.$bunnies.current_id|.stat}
			{VARIABLE bunnies.$bunnies.current_id|.stat $bunnies.rand|}
			{CLEAR_VARIABLE bunnies.rand}
		[/event]
		
		# This is a helper for bunnies_new_turn
		#   given a bunny id saved in bunnies.current_id, sets that bunny's side
		#   according to whether or not it should be able to block the bunny named by
		#   $bunnies.bunny_to_move
		# This is safe to call if $bunnies.bunny_to_move=$bunnies.curent_id; it will
		#  leave that bunny on side 1.
		[event]
			name=bunnies_set_team
			id=bunnies_set_team
			first_time_only=no
			#{DEBUG_MSG "setting $bunnies.current_id|'s team. Her stat is $bunnies.$bunnies.current_id|.stat|, and $bunnies.bunny_to_move|'s stat is $bunnies.$bunnies.bunny_to_move|.stat|."}
			{VARIABLE bunnies.temp_current_stat $bunnies.$bunnies.current_id|.stat|}
			{VARIABLE bunnies.temp_other_stat $bunnies.$bunnies.bunny_to_move|.stat|}
			# bunnies can block others if their stat is greater by at least one
			{IF_VAR bunnies.temp_current_stat greater_than $bunnies.temp_other_stat| (
				[then]
					[modify_unit]
						[filter]
							id=$bunnies.current_id|
						[/filter]
						side=4
					[/modify_unit]
				[/then]
			)}
			{CLEAR_VARIABLE bunnies.temp_current_stat}
			{CLEAR_VARIABLE bunnies.temp_other_stat}
		[/event]
		
	# This is the closing for bunnies_begin_race
	# see above for it's explanation
	[/event]
	
	[event]
		name=moveto
		id=bunnies_race_winner
		first_time_only=no
		[filter]
			type=Rabbit
			[filter_location]
				terrain=Gs^Efm
				y=8-13
			[/filter_location]
		[/filter]
		#first, figure out who the winner is:
		[store_unit]
			[filter]
				x,y=$x1,$y1
			[/filter]
			variable=bunnies.temp_unit
			kill=no
		[/store_unit]
		{VARIABLE bunnies.winner $bunnies.temp_unit.id|}
		{CLEAR_VARIABLE bunnies.temp_unit}
		{VOADAR_MESSAGE $bunnies.winner| (_"Squeek! Squeek!!!")}
		# Now Maple declares the winner, and the game ends
		[if]
			[variable]
				name=bunnies.winner
				equals=$bunnies.choice
			[/variable]
			[else]
				{VOADAR_MESSAGE bunny_maple (_"<i>(Laughs)</i> Sorry cutie, looks like I win this time! At least you had fun, right? If you want to give it another shot sometime, I'd love to play again!")}
			[/else]
			[then]
				{VOADAR_MESSAGE bunny_maple (_"Congratulations, cutie! Looks like you win! Here's your prize: $d|$bunnies.bet| gold!$b| Hey, that was fun. We can play again soon if you want.")}
				{VARIABLE_OP bunnies.bet multiply 2}
				[gold]
					side=1
					amount=$bunnies.bet|
				[/gold]
				# also, if you win enough times, you get a special bonus
				{VARIABLE_OP Maple.Voadar_bunny_wins add 1}
				{IF_VAR Maple.Voadar_bunny_wins equals 3 (
					[then]
						{VOADAR_MESSAGE_NARRATOR (_"You've been closely watching how the bunnies run through the woods, and how they take advantage of the terrain so naturally. It's hard for a big creature like you to imitate them, but you still have learned a thing or two about using your surroundings to your advantage. All terrain defenses increase by 10%!")}
						[modify_unit]
							[filter]
								id=Voadar
							[/filter]
							[effect]
								apply_to=defense
								[defense]
									deep_water=-10
									shallow_water=-10
									reef=-10
									swamp_water=-10
									flat=-10
									sand=-10
									forest=-10
									hills=-10
									mountains=-10
									village=-10
									castle=-10
									cave=-10
									fungus=-10
									frozen=-10
									unwalkable=-10
								[/defense]
							[/effect]
						[/modify_unit]
					[/then]
				)}
				{IF_VAR Maple.Voadar_bunny_wins equals 6 (
					[then]
						{VOADAR_MESSAGE_NARRATOR (_"After many hours of studying how the bunnies move through the hills and trees, you have become far more agile yourself. Not only do you imitate what the bunnies do well, but you have learned from their mistakes. Now you can dodge in and out of cover at a moment's notice, even faster than the bunnies you studied. All terrain defenses increased by another 10%!")}
						[modify_unit]
							[filter]
								id=Voadar
							[/filter]
							[effect]
								apply_to=defense
								[defense]
									deep_water=-10
									shallow_water=-10
									reef=-10
									swamp_water=-10
									flat=-10
									sand=-10
									forest=-10
									hills=-10
									mountains=-10
									village=-10
									castle=-10
									cave=-10
									fungus=-10
									frozen=-10
									unwalkable=-10
								[/defense]
							[/effect]
						[/modify_unit]
					[/then]
				)}
			[/then]
		[/if]
		[fire_event]
			name=bunny_game_over
		[/fire_event]
	[/event]
	
	# This event is for when the game ends, for any reason
	# it puts units back where they belong and removes this mini_game's events/variables
	[event]
		name=bunny_game_over
		id=bunny_game_over
		first_time_only=yes
		[clear_menu_item]
			id=bunnies_end_turn
		[/clear_menu_item]
		[kill]
			id=bunny_maple
			animate=no
		[/kill]
		[kill]
			type=Rabbit
			x=80-120
		[/kill]
		[modify_unit]
			[filter]
				id=Voadar
			[/filter]
			side=1
		[/modify_unit]
		{TELEPORT_UNIT (id=Voadar) 91 13}
		#he's back in the forest, now, so limit vision again:
		[fire_event]
			id=reduce_vision_for_forest
		[/fire_event]
		[modify_side]
			side=1
			fog=yes
		[/modify_side]
		[fire_event]
			name=moveto
			# This acts like Voadar just exited an area
			# He ends up in the forest, near where he entered the mini-game
			# (if you started the mini-game without debug mode, that is)
			[primary_unit]
				id=Voadar
			[/primary_unit]
		[/fire_event]
		[objectives]
            side=1
            [objective]
                description= _ "Avenge Cadameron"
                condition=win
            [/objective]
			[objective]
				description=_"Death of Voadar"
				condition=lose
			[/objective]
        [/objectives]
		{CLEAR_VARIABLE bunnies}
		{CLEAR_VARIABLE bunny_maple}
		{CLEAR_VARIABLE Flopsy}
		{CLEAR_VARIABLE Foo_foo}
		{CLEAR_VARIABLE Boom_jun}
		{VOADAR_REMOVE_EVENT bunnies_end_turn}
		{VOADAR_REMOVE_EVENT Maple_conversation_make_bet}
		{VOADAR_REMOVE_EVENT Maple_conversation_make_bet_continue}
		{VOADAR_REMOVE_EVENT bunnies_not_enough_gold}
		{VOADAR_REMOVE_EVENT bunnies_begin_race}
		{VOADAR_REMOVE_EVENT bunnies_start_race}
		{VOADAR_REMOVE_EVENT bunnies_new_round}
		{VOADAR_REMOVE_EVENT bunnies_random_stats}
		{VOADAR_REMOVE_EVENT bunnies_set_team}
		{VOADAR_REMOVE_EVENT bunnies_move_bunny}
	[/event]
[/event]
# These events are used in the bunny game, but can be defined outside of the mini-game safely. 
# They are just conversations you can have with the bunnies.
[event]
	name=bunny_conversation_energy_2
	id=bunny_conversation_energy_2
	first_time_only=no
	{VOADAR_MESSAGE $unit.id| (_"Squeak.")}
[/event]
[event]
	name=bunny_conversation_energy_3
	id=bunny_conversation_energy_3
	first_time_only=no
	{VOADAR_MESSAGE $unit.id| (_"Squeak!")}
[/event]
[event]
	name=bunny_conversation_energy_4
	id=bunny_conversation_energy_4
	first_time_only=no
	{VOADAR_MESSAGE $unit.id| (_"Squeak! Squeak!")}
[/event]


