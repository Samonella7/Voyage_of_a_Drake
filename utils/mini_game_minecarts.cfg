#textdomain wesnoth-voadar

# This file contains the minecarts mini-game

[event]
	name=start
	id=mineshaft_prepare_vars
	{VARIABLE mineshaft.visited_before no}
	{VARIABLE mineshaft.cleared_first_area no}
	{VARIABLE mineshaft.cleared_second_area no}
	{VARIABLE mineshaft.cleared_third_area no}
[/event]
[event]
	name=victory
	id=mineshaft_clear_vars
	{CLEAR_VARIABLE mineshaft}
[/event]

# the normal (non-debug) way to start is by moving to the mineshaft in the far northwest
[event]
	name=moveto
	id=moveto_mineshaft
	first_time_only=no
	[filter]
		id=Voadar
		x,y=5,1
	[/filter]
	[fire_event]
		id=minecarts_mini_game
	[/fire_event]
[/event]

[event]
	name=minecarts_mini_game
	id=minecarts_mini_game
	first_time_only=no
	
	[modify_side]
		side=1
		fog=no
	[/modify_side]
	{TELEPORT_UNIT (id=Voadar) 66 58}
	[place_shroud]
		side=1
		# No filter
	[/place_shroud]
	[remove_shroud]
		side=1
		x=65-100
		y=56-60
	[/remove_shroud]
	{SCROLL_TO 66 58}
	
	[set_menu_item]
		id=minecarts_switch_control
		description=_"Control this unit"
		image=buttons/WML-custom.png
		[default_hotkey]
			key=c
		[/default_hotkey]
		[show_if]
			[have_unit]
				x,y=$x1,$y1
				side=5
				[and]
					id=Voadar
					[or]
						[filter_wml]
							[variables]
								first=yes
							[/variables]
						[/filter_wml]
					[/or]
					[or]
						[filter_wml]
							[variables]
								last=yes
							[/variables]
						[/filter_wml]
					[/or]
				[/and]
			[/have_unit]
		[/show_if]
		[command]
			[modify_unit]
				[filter]
					side=1
				[/filter]
				side=5
			[/modify_unit]
			[modify_unit]
				[filter]
					x,y=$x1,$y1
				[/filter]
				side=1
			[/modify_unit]
			[fire_event]
				name=restrict_movement
				[primary_unit]
					x,y=$x1,$y1
				[/primary_unit]
			[/fire_event]
		[/command]
	[/set_menu_item]
	
	#####################################
	# MOVEMENT RULES
	#####################################
	
	# attacking the carts is a waste of time:
	[event]
		name=attacker hits
		id=minecarts_heal
		first_time_only=no
		[filter]
			id=Voadar
		[/filter]
		[filter_second]
			type=Minecart
		[/filter_second]
		[heal_unit]
			[filter]
				x,y=$x2|,$y2|
			[/filter]
		[/heal_unit]
	[/event]
	
	# you can only move on tracks that are oriented towards you
	[event]
		name=restrict_movement
		id=restrict_movement
		first_time_only=no
		# first, clear out any restrictions that were in place for the previous unit:
		[terrain]
			[and]
				terrain=*^Ymr\
			[/and]
			terrain=^Br\
			layer=overlay
		[/terrain]
		[terrain]
			[and]
				terrain=*^Ymr/
			[/and]
			terrain=^Br/
			layer=overlay
		[/terrain]
		[terrain]
			[and]
				terrain=*^Ymr|
			[/and]
			terrain=^Br|
			layer=overlay
		[/terrain]
		# then apply any restrictions that are relevant for this unit
		# (there are only restrictions if it is a minecart)
		{IF_VAR unit.type not_equals Minecart (
			[then]
				[return]
				[/return]
			[/then]
		)}
		# which directions are blocked depends on the current tile's orientation:
		[store_locations]
			x,y=$x1,$y1
			variable=mineshaft.cur_tile
		[/store_locations]
		{IF_VAR mineshaft.cur_tile.terrain contains \ (
			[else]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=nw,se
					[/filter_adjacent_location]
					[and]
						terrain=*^Br/
					[/and]
					terrain=^Ymr/
					layer=overlay
				[/terrain]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=nw,se
					[/filter_adjacent_location]
					[and]
						terrain=*^Br|
					[/and]
					terrain=^Ymr|
					layer=overlay
				[/terrain]
			[/else]
		)}
		{IF_VAR mineshaft.cur_tile.terrain contains / (
			[else]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=ne,sw
					[/filter_adjacent_location]
					[and]
						terrain=*^Br\
					[/and]
					terrain=^Ymr\
					layer=overlay
				[/terrain]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=ne,sw
					[/filter_adjacent_location]
					[and]
						terrain=*^Br|
					[/and]
					terrain=^Ymr|
					layer=overlay
				[/terrain]
			[/else]
		)}
		{IF_VAR mineshaft.cur_tile.terrain contains | (
			[else]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=n,s
					[/filter_adjacent_location]
					[and]
						terrain=*^Br/
					[/and]
					terrain=^Ymr/
					layer=overlay
				[/terrain]
				[terrain]
					[filter_adjacent_location]
						x,y=$x1,$y1
						adjacent=n,s
					[/filter_adjacent_location]
					[and]
						terrain=*^Br\
					[/and]
					terrain=^Ymr\
					layer=overlay
				[/terrain]
			[/else]
		)}
	[/event]
	
	# moving one cart moves the rest in the chain, and recalculates the restricted directions
	[event]
		name=moveto
		id=move_minecart
		first_time_only=no
		[filter]
			type=Minecart
		[/filter]
		
		[heal_unit]
			[filter]
				x,y=$x1|,$y1|
			[/filter]
			amount=0
			moves=full
		[/heal_unit]
		[store_unit]
			[filter]
				x,y=$x1|,$y1|
			[/filter]
			variable=mineshaft.temp_cart
		[/store_unit]
		{IF_VAR mineshaft.temp_cart.variables.first equals yes (
			[then]
				{VARIABLE mineshaft.prev_or_next next}
			[/then]
			[else]
				{VARIABLE mineshaft.prev_or_next previous}
			[/else]
		)}
		{VARIABLE mineshaft.temp_x $x2|}
		{VARIABLE mineshaft.temp_y $y2|}
		[while]
			[not]
				[variable]
					name=mineshaft.temp_cart.variables.$mineshaft.prev_or_next|_id
					contains=null
				[/variable]
			[/not]
			[do]
				[store_unit]
					[filter]
						id=$mineshaft.temp_cart.variables.$mineshaft.prev_or_next|_id|
					[/filter]
					variable=mineshaft.temp_cart
				[/store_unit]
				{VARIABLE mineshaft.to_x $mineshaft.temp_x|}
				{VARIABLE mineshaft.to_y $mineshaft.temp_y|}
				{VARIABLE mineshaft.temp_x $mineshaft.temp_cart.x|}
				{VARIABLE mineshaft.temp_y $mineshaft.temp_cart.y|}
				[move_unit]
					id=$mineshaft.temp_cart.id|
					to_x=$mineshaft.to_x|
					to_y=$mineshaft.to_y|
					check_passability=no
					fire_event=no
				[/move_unit]
			[/do]
		[/while]
		
		[fire_event]
			id=restrict_movement
			[primary_unit]
				x,y=$x1,$y1
			[/primary_unit]
		[/fire_event]
	[/event]
	
	#####################################
	# PLACE THE MINECARTS
	#####################################
	
# a macro for one minecart. {CHAIN_ID} is the prefix for the ids of all minecarts 
# that are hooked up to this one. {COLOR} should be the same for all carts with that id.
# {FIRST} and {LAST} are booleans, indicating whether this cart is at the front or end of its chain
# {PREV_NUM}, {THIS_NUM} and {NEXT_NUM} are the last number in the id of the relevant minecart
# Use "null" if one doesn't exist (which will only happen if {FRONT} and/or {BACK} is yes)
#define VOADAR_MINECART CHAIN_ID COLOR X Y FIRST LAST PREV_NUM THIS_NUM NEXT_NUM WML
	[unit]
		type=Minecart
		side=5
		id={CHAIN_ID}{THIS_NUM}
		x,y={X},{Y}
		{WML}
		[variables]
			first={FIRST}
			last={LAST}
			previous_id={CHAIN_ID}{PREV_NUM}
			next_id={CHAIN_ID}{NEXT_NUM}
		[/variables]
		variation={COLOR}
	[/unit]
#enddef
	
	{IF_VAR mineshaft.cleared_first_area equals no (
		[then]
			{VOADAR_MINECART puz1lon none 70 58 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz1lon none 69 59 no  no  0    1 2    ()}
			{VOADAR_MINECART puz1lon none 68 58 no  no  1    2 3    ()}
			{VOADAR_MINECART puz1lon none 67 58 no  yes 2    3 null ({IS_HERO})}
			
			{VOADAR_MINECART puz1bar dark 72 58 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz1bar dark 73 59 no  yes 0    1 null ({IS_HERO})}
			
			{VOADAR_MINECART puz1toy yell 68 59 yes yes null 0 null ({IS_HERO})}
			
			{VOADAR_MINECART puz1sml red 72 59 yes yes null 0 null ({IS_HERO})}
			
			{VOADAR_MINECART puz1end light 72 57 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz1end light 73 57 no  yes 0    1 null ({IS_HERO})}
		[/then]
	)}
	{IF_VAR mineshaft.cleared_second_area equals no (
		[then]
			{VOADAR_MINECART puz2lon dark 81 59 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz2lon dark 80 58 no  no  0    1 2    ()}
			{VOADAR_MINECART puz2lon dark 79 58 no  no  1    2 3    ()}
			{VOADAR_MINECART puz2lon dark 78 57 no  yes 2    3 null ({IS_HERO})}
			
			{VOADAR_MINECART puz2fro light 79 59 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz2fro light 78 59 no  no  0    1 2    ()}
			{VOADAR_MINECART puz2fro light 77 59 no  yes 1    2 null ({IS_HERO})}
			
			{VOADAR_MINECART puz2sml yell 77 57 yes yes null 0 null ({IS_HERO})}
			
			{VOADAR_MINECART puz2bak none 81 58 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz2bak none 82 58 no  no  0    1 2    ()}
			{VOADAR_MINECART puz2bak none 83 59 no  no  1    2 3    ()}
			{VOADAR_MINECART puz2bak none 84 59 no  yes 2    3 null ({IS_HERO})}
		[/then]
	)}
	{IF_VAR mineshaft.cleared_third_area equals no (
		[then]
			{VOADAR_MINECART puz3mid dark 90 57 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz3mid dark 91 57 no  no  0    1 2    ()}
			{VOADAR_MINECART puz3mid dark 92 57 no  no  1    2 3    ()}
			{VOADAR_MINECART puz3mid dark 93 58 no  yes 2    3 null ({IS_HERO})}
			
			{VOADAR_MINECART puz3bak light 93 57 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz3bak light 94 56 no  no  0    1 2    ()}
			{VOADAR_MINECART puz3bak light 95 57 no  no 1    2 3    ()}
			{VOADAR_MINECART puz3bak light 96 57 no  yes 2    3 null ({IS_HERO})}
			
			{VOADAR_MINECART puz3fro yell 86 59 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz3fro yell 87 59 no  no  0    1 2    ()}
			{VOADAR_MINECART puz3fro yell 88 58 no  yes 1    2 null ({IS_HERO})}
			
			{VOADAR_MINECART puz3tin blue 90 60 yes yes null 0 null ({IS_HERO})}
			
			{VOADAR_MINECART puz3sml red 93 60 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz3sml red 94 60 no  yes 0    1 null ({IS_HERO})}
			
			{VOADAR_MINECART puz3lon none 90 58 yes no  null 0 1    ({IS_HERO})}
			{VOADAR_MINECART puz3lon none 89 58 no  no  0    1 2    ()}
			{VOADAR_MINECART puz3lon none 88 57 no  no  1    2 3    ()}
			{VOADAR_MINECART puz3lon none 87 57 no  no  2    3 4    ()}
			{VOADAR_MINECART puz3lon none 86 56 no  yes 3    4 null ({IS_HERO})}
		[/then]
	)}
	
#undef VOADAR_MINECART
	
	
	# if this is your first time in the shaft, you get an extra message:
	{IF_VAR mineshaft.visited_before equals no (
		[then]
			{VOADAR_MESSAGE_NARRATOR (_"This decrepit old mineshaft seems surprisingly stable. It is safe to explore, but the narrow tunnel is full of minecarts, many of which are hooked together into small trains. It may be difficult to manuver around them.")}
			{VARIABLE mineshaft.visited_before yes}
		[/then]
	)}
	[objectives]
		side=1
		[objective]
			description= _ "Explore the mineshaft"
			condition=win
		[/objective]
		[objective]
			description=_"To rearrange the minecarts, right-click one and select 'Control this unit'"
			condition=win
		[/objective]
		[objective]
			description=_"Use the same method to switch control back to Voadar"
			condition=win
		[/objective]
		[objective]
			description=_"Death of Voadar"
			condition=lose
		[/objective]
		[note]
			description=_"Minecarts can only move by following the tracks."
		[/note]
		[note]
			description=_"You can only control minecarts that have a hero icon"
		[/note]
		[note]
			red,blue,green=0,255,255
			description="Hint: Save time by using the keyboard hotkey for changing unit control (default c)"
		[/note]
	[/objectives]
	[show_objectives]
	[/show_objectives]
	
	[event]
		name=moveto
		id=leave_mineshaft
		first_time_only=yes
		[filter]
			id=Voadar
			x,y=66,58
		[/filter]
		
		[modify_side]
			side=1
			fog=yes
		[/modify_side]
		{TELEPORT_UNIT (id=Voadar) 5 1}
		{SCROLL_TO 5 1}
		[reset_fog]
			[filter_side]
				side=1
			[/filter_side]
			reset_view=yes
		[/reset_fog]
		[redraw]
			side=1
			clear_shroud=yes
		[/redraw]
		
		{VOADAR_REMOVE_EVENT minecarts_heal}
		{VOADAR_REMOVE_EVENT move_minecart}
		{VOADAR_REMOVE_EVENT restrict_movement}
		
		[kill]
			type=Minecart
			animate=no
		[/kill]
		
		[clear_menu_item]
			id=minecarts_switch_control
		[/clear_menu_item]
		
        [objectives]
            side=1
            [objective]
                description= _ "Avenge Cadameron"
                condition=win
            [/objective]
            [objective]
                description=_"Death of Voadar"
                condition=lose
            [/objective]
        [/objectives]
		
		# Deal with shroud (this code is straight from utils/area_events_scenario.cfg)
		[place_shroud]
			side=1
			# No filter
		[/place_shroud]
		[remove_shroud]
			side=1
			find_in=areas.all_out_door_locs.impassable
			[or]
				find_in=areas.all_out_door_locs.forest
			[/or]
			[or]
				find_in=areas.all_out_door_locs.village
			[/or]
			[or]
				find_in=areas.all_out_door_locs.home
			[/or]
			[or]
				find_in=areas.all_out_door_locs.farm
			[/or]
		[/remove_shroud]
		# Also grab the borders, since the above doesn't quite do it (even with include_borders=yes)
		[remove_shroud]
			side=1
			[and]
				x=0,101
				[or]
					y=0,61
				[/or]
			[/and]
			[filter_adjacent_location]
				[filter_vision]
					side=1
					respect_fog=no
				[/filter_vision]
			[/filter_adjacent_location]
		[/remove_shroud]
	[/event]
[/event]

# marks a checkpoint in the minigame; when you get to a bomb,
# you clear out the minecarts in the area before it so you don't have to deal
# with them anymore
#define VOADAR_FRAME IMAGE X Y
	[remove_item]
		x,y={X},{Y}
	[/remove_item]
	[item]
		x,y={X},{Y}
		halo={IMAGE}
	[/item]
	[redraw]
	[/redraw]
	[delay]
		time=25
	[/delay]
#enddef
#define VOADAR_MINECART_BOMB X Y X_MIN X_MAX CLEARED_VAR
	[event]
		name=start
		[item]
			x,y={X},{Y}
			image=items/bomb.png
		[/item]
	[/event]
	[event]
		name=moveto
		id=minecarts_{CLEARED_VAR}
		first_time_only=yes
		[filter]
			id=Voadar
			[filter_location]
				[filter_adjacent_location]
					x,y={X},{Y}
				[/filter_adjacent_location]
			[/filter_location]
		[/filter]
		{VARIABLE mineshaft.{CLEARED_VAR} yes}
		[animate_unit]
			flag=attack
			[filter]
				id=Voadar
			[/filter]
			[primary_attack]
				name=fire breath
			[/primary_attack]
			hits=yes
			[facing]
				x,y={X},{Y}
			[/facing]
		[/animate_unit]
		[sound]
			name=fire.wav
		[/sound]
		{VOADAR_FRAME projectiles/fireball-impact-1.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-2.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-3.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-4.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-5.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-6.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-7.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-8.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-9.png  {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-10.png {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-11.png {X} {Y}}
		{VOADAR_FRAME projectiles/fireball-impact-12.png {X} {Y}}
		[remove_item]
			x,y={X},{Y}
		[/remove_item]
		[terrain]
			# the bomb should originally have an impassable version of rubble beneath it,
			# change that back to the normal one:
			x,y={X},{Y}
			[and]
				terrain=*^Yru
			[/and]
			terrain=^Dr
			layer=overlay
		[/terrain]
		[for]
			start={X_MAX}
			end={X_MIN}
			step=-1
			variable=mineshaft.iter
			[do]
				[kill]
					x=$mineshaft.iter
					type=Minecart
					animate=yes
				[/kill]
			[/do]
		[/for]
	[/event]
#enddef
	{VOADAR_MINECART_BOMB 74 56 67 74 cleared_first_area}
	{VOADAR_MINECART_BOMB 85 58 77 84 cleared_second_area}
	{VOADAR_MINECART_BOMB 96 56 86 97 cleared_third_area}
#undef VOADAR_MINECART_BOMB
#undef VOADAR_FRAME

# finally, the pirze at the end of the tunnel:
[event]
	name=start
	[item]
		x,y=98,57
		image=items/storm-trident.png
	[/item]
[/event]
[event]
	name=moveto
	id=pickup_trident
	first_time_only=no
	[filter]
		id=Voadar
		x,y=98,57
	[/filter]
	[modify_unit]
		[filter]
			id=Voadar
		[/filter]
		[effect]
			apply_to=new_attack
			name=trident
			description=_"trident"
			type=pierce
			[specials]
				{WEAPON_SPECIAL_FIRSTSTRIKE}
			[/specials]
			damage=15
			number=2
			range=melee
			icon=attacks/trident.png
		[/effect]
		# TODO apparently this anim doesn't work???
	[/modify_unit]
	[object]
		[filter]
			id=Voadar
		[/filter]
		[effect]
			apply_to=new_animation
			[attack_anim]
				[filter_attack]
					name=trident
				[/filter_attack]
				start_time=-200
				[frame]
					image=units/drakes/fire.png:300
				[/frame]
				{SOUND:HIT_AND_MISS spear.ogg spear-miss.ogg -100}
			[/attack_anim]
		[/effect]
	[/object]
	[message]
		speaker=narrator
		image=attacks/trident.png
		message=_"There's a fast, cold stream here. You'll never know where it comes from or where it leads, but it looks like this strange three-tipped spear was carried along it and washed up here. It's surprisingly heavy, and is too long to be useful for a human. You wonder what kind of civilization would craft such a brutal weapon, but it's a usable size for you."
	[/message]
	[remove_item]
		x,y=98,57
	[/remove_item]
[/event]

