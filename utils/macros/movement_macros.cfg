#textdomain wesnoth-voadar

# In short, these are tools for making the ais move certain units to 
# certain locations.

# These macros are simple enough that perhaps it would have been best
# to just type them out in the schedules, removing an almost pointless layer of abstraction
# The reason they exist is that they used to work in a much more complicated way, using
# micro_ais to tell the ai where to send units. It was too laggy when too many micro_ais were
# used, though, so I opted back to this simpler option. There was no reason to go and edit 
# all the schedules, though; they still rely on these macros.
# The legacy code is below, completely commented out.

# The following is a very commonly used macro for telling units where to go.
# {ON_ARRIVAL_WML} will most likely be used for teleporting through doorways
#     and then specifying the next destination by calling this macro again.
# Also, trouble will come if the unit can't get within 1 tile of the destination
#     if there is important {ON_ARRIVAL_WML}
#     (being within 1 tile is allowed, in case Voadar is sitting on the destination)
#define VOADAR_SET_DESTINATION UNIT_ID X Y ON_ARRIVAL_WML
# these are some of the few events without id's, since they'll be created any number of times
    [event]
        name=side 2 turn
		# if we were passed a variable, we should use the value it was then,
		# not necessarily the same as the value at the time of this event firing:
		delayed_variable_substitution=no
        {MOVE_UNIT (id={UNIT_ID}) {X} {Y}}
        {ON_ARRIVAL_WML}
    [/event]
#enddef

# Here is a convenience/efficiency version of the above macro
# to be used when nothing should happen on arrival
# (ie, this destination is the end of the journey)
# The same cautions and design principles as the main version still apply
#define VOADAR_SET_SIMPLE_DESTINATION UNIT_ID X Y
    [event]
        name=side 2 turn
		delayed_variable_substitution=no
        {MOVE_UNIT (id={UNIT_ID}) {X} {Y}}
    [/event]
#enddef

################################################
# Legacy version (and it's comments) begin here
################################################
## #define VOADAR_SET_DESTINATION UNIT_ID X Y ON_ARRIVAL_WML
##  #Firstly, remove any previous destination micro_ais for this unit. In this way,
##  # there can never be more than one per unit, which is very important because if
##  # there are very many of these the ai starts taking a painfully long time to think
##  # between each move.
##  # first, remove any possible micro_ais that already existed for this unit:
##  [micro_ai]
##      side=2
##      ai_type=goto
##      action=delete
##      ca_id={UNIT_ID}_ai
##  [/micro_ai]
##  # Now make the new one:
##  [micro_ai]
##      side=2
##      ai_type=goto
##      action=add
##      ca_id={UNIT_ID}_ai
##      [filter]
##          id={UNIT_ID}
##      [/filter]
##      [filter_location]
##          x,y={X},{Y}
##      [/filter_location]
##  [/micro_ai]
##  # Next, execute the given WML whenever the unit arrives
##  # Allow a radious of 1 in case Voadar is sitting on the destination
##  [event]
##      name=moveto
##      first_time_only=yes
##      [filter]
##          id={UNIT_ID}
##          [filter_location]
##              x,y={X},{Y}
##              radius=1
##          [/filter_location]
##      [/filter]
##      {ON_ARRIVAL_WML}
##  [/event]
##  # Finally, remove the ai if the unit gets all the way in.
##  # No radius allowance here; if Voadar was blocking the tile, then moves,
##  # the unit should finish his journey by taking the now open tile
##  # (although it's likely that he has already been directed somewhere else
##  # by the above event anyway)
##  # The original design here was simpler: it always had one micro_ai per unit.
##  # That way, removing ais was never necessary and this macro was a lot smaller, 
##  # which would be very good. However, as mentioned, having very many of these for
##  # any one side slows the ai down a lot; one per unit, in fact, was far too many.
##  # So now we delete the micro_ais as soon as possible. If we ever end up needing 
##  # one per unit, which is theoretically possible but very unlikely, then so be it.
##  # The important thing is that there are no micro_ais for units that are just 
##  # sitting in place.
##  # Note: it actually is possible for there to be idle ais... a unit is stored away
##  # in a variable, like when the fishers get on their ship, the micro_ai sticks around
##  # and does nothing. This is uncommon enough that I'm ignoring it.
##  {VARIABLE_OP micro_ais.number add 1}
##  [event]
##      name=side turn
##      id=micrco_ai_turn_$turn_number|_number_$micro_ais.number|
##      # I'll explain the weird id later down
##      first_time_only=yes
##      delayed_variable_substitution=no
##      # delayed variable substitution?
##      # this is just in case the macro was passed a variable instead of a constant unit id.
##      # we want to make sure we get the value it was then, in case it has since changed
##      [filter_condition]
##          [have_unit]
##              id={UNIT_ID}
##              [filter_location]
##                  x,y={X},{Y}
##              [/filter_location]
##          [/have_unit]
##      [/filter_condition]
##      [micro_ai]
##          side=2
##          ai_type=goto
##          action=delete
##          ca_id={UNIT_ID}_ai
##      [/micro_ai]
##  [/event]
## #enddef
## #define VOADAR_SET_SIMPLE_DESTINATION UNIT_ID X Y
##  [micro_ai]
##      side=2
##      ai_type=goto
##      action=delete
##      ca_id={UNIT_ID}_ai
##  [/micro_ai]
##  [micro_ai]
##      side=2
##      ai_type=goto
##      action=add
##      ca_id={UNIT_ID}_ai
##      [filter]
##          id={UNIT_ID}
##      [/filter]
##      [filter_location]
##          x,y={X},{Y}
##      [/filter_location]
##  [/micro_ai]
##  {VARIABLE_OP micro_ais.number add 1}
##  [event]
##      name=side turn
##      id=micrco_ai_turn_$turn_number|_number_$micro_ais.number|
##      first_time_only=yes
##      delayed_variable_substitution=no
##      [filter_condition]
##          [have_unit]
##              id={UNIT_ID}
##              [filter_location]
##                  x,y={X},{Y}
##              [/filter_location]
##          [/have_unit]
##      [/filter_condition]
##      [micro_ai]
##          side=2
##          ai_type=goto
##          action=delete
##          ca_id={UNIT_ID}_ai
##      [/micro_ai]
##  [/event]
## #enddef
## 
## 
## # Ok, what's up with those weird ids in the side turn events?
## # Well, often enough one of those side turn events never gets fired. Most likely,
## # The unit reached a radius of 1 to the destination tile and was teleported somewhere 
## # else, never to return. Or at least not for a long time. This happens often enough
## # that we start piling up an inordinate amount of these obsolete side turn events.
## # Besides that this bloaty-ness is obviously poor form, it is also possible 
## # (though unlikely) that one of these ancient events could delete a micro_ai when it 
## # shouldn't, which would be a dreadfully annoying bug to track down.
## # The only way to combat this is to remove the events manually, and this is only possible if
## # each event has a unique id. SO...
## #
## # The id is made up of two important parts: the turn number and micro_ais.number.
## # micro_ais.number is incremented each time a micro_ai is created, and set to zero each turn.
## # This way, each side turn event has a unique id.
## # The turn number is important, because it is how I decide which side_turn events are old enough
## # to get rid of; every unit gets a new schedule at bare minimum every 24 turns (usually 12), so 
## # each turn I remove any of these side turn events that are more than 25 turns old.
## # Also, I only remove the ones with a micro_ais.number value less than 30... but I'm pretty sure
## # that I'll never make more than 20 new ones in a turn so I'm confident that they'll
## # all get removed.
## 
## # This event does everything prescribed in the comment above
## # just call this macro anywhere in the scenario top-level, and the other 
## # micro_ai macros will be safe to use anywhere in the scenario
## #define MICRO_AIS_CLEAN_UP
##  [event]
##      name=new turn
##      id=micro_ais_reset_number
##      first_time_only=no
##      {VARIABLE micro_ais.number 30}
##      {VARIABLE micro_ais.turn_to_wipe $turn_number|}
##      {VARIABLE_OP micro_ais.turn_to_wipe sub 25}
##      [while]
##          [variable]
##              name=micro_ais.number
##              not_equals=0
##          [/variable]
##          [do]
##              [event]
##                  id=micrco_ai_turn_$micro_ais.turn_to_wipe|_number_$micro_ais.number|
##                  remove=yes
##              [/event]
##              {VARIABLE_OP micro_ais.number sub 1}
##          [/do]
##      [/while]
##  [/event]
## #enddef











