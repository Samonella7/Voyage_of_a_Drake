#textdomain wesnoth-voadar

# This file contains the hunting mini-game

#IMPORTANT
# This mini_game should not be started via debug mode.
# It is tied into Grigar's schedule closely enough that the player/tester
# should always rely on the normal way of starting the game, namely talking to Grigar in the early night.

# This event is what starts it all:
[event]
	name=launch_hunting_mini_game
	id=launch_hunting_mini_game
	first_time_only=no
	
	# no matter what, you get a free moves refill to kick off the hunt
	[heal_unit]
		[filter]
			id=Voadar
		[/filter]
		amount=0
		moves=full
		restore_attacks=yes
		restore_statuses=no
	[/heal_unit]
	
	# First, a short cut-scene to start the hunt
	# Grigar teaches you to track if he hasn't yet
	{IF_VAR Voadar.can_track equals no (
		[then]
			# If you never have (aka you havent learned to track yet and need to):
			{MOVE_UNIT (id=Grigar) 26 28}
			{VOADAR_MESSAGE Grigar (_"Animals come here often. Sand is soft, wet. Good tracks. Come see.")}
			{MOVE_UNIT (id=Grigar) 27 28}
			{VARIABLE Grigar.conversation Grigar_conversation_teaching_tracking}
			[event]
				name=moveto
				id=hunting_first_see_animal_tracks
				first_time_only=yes
				[filter]
					id=Voadar
					x,y=26,28
				[/filter]
				{VOADAR_MESSAGE_NARRATOR (_"You see some animal tracks here, but they are scattered and confusing. You can't tell which way they lead.")}
				{VOADAR_MESSAGE Grigar (_"Not so hard. See?")}
				{MOVE_UNIT (id=Voadar) 26 27}
				{MOVE_UNIT (id=Grigar) 26 28}
				{VOADAR_MESSAGE Grigar (_"Toe here. Push like this. Step on rock, no track. But then here, toe here now. Go this way. You look again.")}
				{MOVE_UNIT (id=Grigar) 27 28}
				[event]
					name=moveto
					id=hunting_second_see_animal_tracks
					first_time_only=yes
					[filter]
						id=Voadar
						x,y=26,28
					[/filter]
					{VOADAR_MESSAGE_NARRATOR (_"With Grigar's help, you manage to follow the tracks! After a little practice, you'll be an $d|expert tracker.$b|")}
					# Though really, you are as good as the game allows already:
					{VARIABLE Voadar.can_track yes}
					[fire_event]
						name=read_first_track
					[/fire_event]
				[/event]
			[/event]
		[/then]
		[else]
			# If you have done this before:
			{MOVE_UNIT (id=Grigar) 26 28}
			{VOADAR_MESSAGE Grigar (_"Hm. Good tracks start here.")}
			{MOVE_UNIT (id=Grigar) 27 28}
			[event]
				name=moveto
				id=hunting_standard_see_animal_tracks
				first_time_only=yes
				[filter]
					id=Voadar
					x,y=26,28
				[/filter]
				[fire_event]
					name=read_first_track
				[/fire_event]
			[/event]
		[/else]
	)}
	# also, this variable prevents the normal schedule from taking him home
	# at the end of the night; we'll handle that inside this mini-game.
	{VARIABLE Grigar.is_hunting yes}
	
	[event]
		name=read_first_track
		id=read_first_track
		first_time_only=yes
		# This is fired at the end of the intro cut-scene, whether this is your first hunt or not
		# This event is where we actually set-up the hunt
		# before I forget, give Grigar his boring hunt conversation:
		{VARIABLE Grigar.conversation Grigar_conversation_hunting}
		#######################################
		# Setup the hunt
		#######################################
		# first thing being first, decide what type of animal you're hunting:
		[set_variable]
			name=hunt.type
			rand=Deer,Deer,Deer,Moose
		[/set_variable]
		# and choose a good location for it to start at:
		[set_variable]
			name=hunt.y
			# skip the swamp/river part of the map,
			# and make the northern half just as likely, even though it has less possibilities:
			rand=6..14,7..10,20..32
		[/set_variable]
		# x range depends on whether y is above the river or below the swamp
		{IF_VAR hunt.y less_than 20 (
			[then]
				[set_variable]
					name=hunt.x
					rand=1..20
				[/set_variable]
			[/then]
			[else]
				[set_variable]
					name=hunt.x
					rand=1..8
				[/set_variable]
			[/else]
		)}
		# Now we can make the unit:
		{IF_VAR hunt.type equals Deer (
			[then]
				{GENERIC_UNIT 3 Deer $hunt.x| $hunt.y|}[+unit]
					id=poor_critter
				[/unit]
				# Deer just run away from you, according to the micro_ai defined in their file
			[/then]
			[else]
				# Moose, on the other hand, attack when you get close; they need to be {GUARDIAN}s
				# which is why this [if] is necessary
				{GENERIC_UNIT 3 Moose $hunt.x| $hunt.y|}{GUARDIAN}[+unit]
					id=poor_critter
				[/unit]
			[/else]
		)}
		# Next, store a path from it to the pond (where the tracks start)
		[find_path]
			[traveler]
				id=poor_critter
			[/traveler]
			[destination]
				x,y=26,28
			[/destination]
			variable=hunt.path
			allow_multiple_turns=yes
			check_zoc=no
		[/find_path]
		# Now iterate through the path and mark each step for Voadar to find
		{FOREACH hunt.path.step i}
			# don't do anything if i==0
			# that is the hex the animal is standing on, so no need to mark tracks there
			# besides, it would lead to an out-of-bounds error
			[if]
				[variable]
					name=i
					not_equals=0
				[/variable]
				[then]
					# Each path needs to know which direction the next one is in:
					[store_relative_direction]
						[source]
							x=$hunt.path.step[$i|].x|
							y=$hunt.path.step[$i|].y|
						[/source]
						[destination]
							x=$hunt.path.step[$($i|-1)].x|
							y=$hunt.path.step[$($i|-1)].y|
						[/destination]
						variable=hunt.dir
					[/store_relative_direction]
					# that saves something like "n" or "sw" in hunt.dir
					# so translate that to something we can display:
					[switch]
						variable=hunt.dir
						[case]
							value=n
							{VARIABLE hunt.dir "north"}
						[/case]
						[case]
							value=nw
							{VARIABLE hunt.dir "north-west"}
						[/case]
						[case]
							value=sw
							{VARIABLE hunt.dir "south-west"}
						[/case]
						[case]
							value=s
							{VARIABLE hunt.dir "south"}
						[/case]
						[case]
							value=se
							{VARIABLE hunt.dir "south-east"}
						[/case]
						[case]
							value=ne
							{VARIABLE hunt.dir "north-east"}
						[/case]
						# No default, if something goes wrong we will just display it as is
					[/switch]
					# Now we can define an event to tell you which direction the animal went from the current tile:
					[event]
						name=moveto
						# the ids are named so that we can easily remove 
						# all of these events whenever the mini-game ends
						id=hunt_track_$i|
						delayed_variable_substitution=no
						first_time_only=no
						[filter]
							id=Voadar
							x=$hunt.path.step[$i|].x|
							y=$hunt.path.step[$i|].y|
						[/filter]
						{VOADAR_MESSAGE_NARRATOR (_"There are some animal tracks here, heading $hunt.dir|.")}
						[allow_undo]
						[/allow_undo]
					[/event]
					#{DEBUG_MSG (_"There outta be an event for $hunt.path.step[$i|].x|,$hunt.path.step[$i|].y|, pointing $hunt.dir|. i is $i|.")}
				[/then]
			[/if]
		{NEXT i}
		# The loop is over, so the hunt is all set-up. Display the first message:
		[fire_event]
			name=moveto
			[primary_unit]
				id=Voadar
			[/primary_unit]
		[/fire_event]
		# also, Grigar gives a warning that moose are more dangerous than deer
		{IF_VAR hunt.type equals Moose (
			[then]
				{VOADAR_MESSAGE Grigar (_"Hm... This one big. Good meat, not so easy to kill.")}
			[/then]
		)}
	[/event]
	
	# Nothing special happens from that point (setting up the tracks)
	#   to the end (killing the animal, running out of time, trying to leave the forest)
	# excpet that Grigar follows you around (and doesn't help fight, the asshole)
	[event]
		name=side 2 turn refresh
		id=grigar_follows_during_hunt
		first_time_only=no
		{VOADAR_STORE_UNIT Voadar no}
		#move to the right of voadar, to not get in the way:
		{VARIABLE_OP Voadar.unit.x add 1}
		{MOVE_UNIT (id=Grigar) $Voadar.unit.x| $Voadar.unit.y|}
		#and stop the ai from moving him (he might have a goal set back at the pond):
		[modify_unit]
			[filter]
				id=Grigar
			[/filter]
			moves=0
		[/modify_unit]
	[/event]
	
	# This is the preferred way for the mini-game to end: you got the buck (or doe, or... i guess the moose is still a buck?)
	[event]
		name=die
		id=hunt_won_mini_game
		[filter]
			id=poor_critter
		[/filter]
		{MOVE_UNIT (id=Grigar) $x1 $y1}
		{VOADAR_MESSAGE Grigar (_"Good. I cut meat.")}
		[animate_unit]
			flag=attack
			[filter]
				id=Grigar
			[/filter]
			[primary_attack]
				name=short sword
			[/primary_attack]
			hits=yes
		[/animate_unit]
		# You get more meat if it was a moose
		{IF_VAR hunt.type equals Moose (
			[then]
				{VOADAR_MESSAGE Grigar (_"Here, you take. <i>(Hands you seven big cuts of fresh meat.)</i> I go now.")}
				{VARIABLE_OP Voadar.inventory.meat add 7}
			[/then]
			[else]
				{VOADAR_MESSAGE Grigar (_"Here, you take. <i>(Hands you five big cuts of fresh meat.)</i> I go now.")}
				{VARIABLE_OP Voadar.inventory.meat add 5}
			[/else]
		)}
		# Let this event do the clean-up work:
		[fire_event]
			name=hunting_mini_game_over
		[/fire_event]
	[/event]
	
	# If you leave the forest, the game automatically ends
	[event]
		name=moved_to_raplice,moved_to_cadameron_farm
		id=leave_forest_end_hunt
		[kill]
			id=poor_critter
			fire_event=no
			animate=no
		[/kill]
		[fire_event]
			name=hunting_mini_game_over
		[/fire_event]
	[/event]
	
	# If the night is about to end, Grigar needs to leave
	[event]
		name=new turn
		id=time_over_end_hunt
		{VOADAR_FILTER_TIME_PREP_HOUR}
		{VOADAR_MESSAGE Grigar (_"Hm... night over. I go now. Try again later.")}
		# The deer runs away:
		[store_unit]
			[filter]
				id=poor_critter
			[/filter]
			variable=hunt.unit
			kill=no
		[/store_unit]
		# it runs to the west side of the map, and up two tiles
		# adding the tiles up makes sure you see it running, so it doesn't just mysteriously (probably annoyingly) disappear
		{VARIABLE_OP hunt.unit.y add 2}
		{MOVE_UNIT (id=poor_critter) 1 $hunt.unit.y|}
		[kill]
			id=poor_critter
			fire_event=no
			animate=no
		[/kill]
		[fire_event]
			name=hunting_mini_game_over
		[/fire_event]
	[/event]
	
	# When the mini-game ends for any reason, clean-up including sending Grigar home for the night:
	[event]
		name=hunting_mini_game_over
		id=hunting_mini_game_over
		first_time_only=yes
		# remove all events that are only necessary for the hunt:
		{VOADAR_REMOVE_EVENT hunting_first_see_animal_tracks}
		{VOADAR_REMOVE_EVENT hunting_second_see_animal_tracks}
		{VOADAR_REMOVE_EVENT hunting_standard_see_animal_tracks}
		{VOADAR_REMOVE_EVENT read_first_track}
		{VOADAR_REMOVE_EVENT hunt_won_mini_game}
		{VOADAR_REMOVE_EVENT leave_forest_end_hunt}
		{VOADAR_REMOVE_EVENT time_over_end_hunt}
		{VOADAR_REMOVE_EVENT grigar_follows_during_hunt}
		{VOADAR_REMOVE_EVENT Grigar_conversation_teaching_tracking}
		{VOADAR_REMOVE_EVENT Grigar_conversation_hunting}
		{FOREACH hunt.path.step i}
			{VOADAR_REMOVE_EVENT hunt_track_$i|}
		{NEXT i}
		#fix this variable so Grigar's normal schedule knows he's not hunting anymore:
		{VARIABLE Grigar.is_hunting no}
		# and clear all variables used by the hunt:
		{CLEAR_VARIABLE hunt}
		# That's all the clean up, so Grigar goes on his way. He would go into his hut,
		# but that's more complicated: i have to get him out for his morning schedule, 
		# and what if it already is morning? much easier to make him sleep outside tonight.
		{MOVE_UNIT (id=Grigar) 18 10}
		{VOADAR_SET_SIMPLE_DESTINATION Grigar 18 10}
		{VARIABLE Grigar.conversation Grigar_conversation_sleeping}
	[/event]	

	# finally, a few trivial conversations with Grigar during the hunt:
	[event]
		name=Grigar_conversation_teaching_tracking
		id=Grigar_conversation_teaching_tracking
		first_time_only=no
		{VOADAR_MESSAGE Grigar (_"See tracks at pond.")}
	[/event]
	[event]
		name=Grigar_conversation_hunting
		id=Grigar_conversation_hunting
		first_time_only=no
		{VOADAR_MESSAGE Grigar (_"<i>(Motions for you to be quiet)</i>")}
	[/event]
	
# That's all:
[/event]
