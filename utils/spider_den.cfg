#textdomain wesnoth-voadar

# This file contains things related to the spider den

[event]
	name=prestart
	id=spiders_prepare_variables
	{VARIABLE spiders.Voadar_has_found_entrance no}
	{VARIABLE spiders.queen_is_dead no}
	#{VARIABLE spiders.are_aggressive no}
	
	#for future release:
	# as long as you haven't attacked a spider, they remain unaggressive. 
	## [micro_ai]
		## side=4
		## ai_type=hang_out
		## action=add
		## [avoid]
			## # no filter; avoid all locations. this cancels the usual "hang_out" behavior
			## # of grouping at a castle, instead they will remain where I put them.
		## [/avoid]
		## [filter]
			## type=Voadar Spider Scuttler,Voadar Spider Weaver,Voadar Spider Giant,Voadar Spider Queen
		## [/filter]
		## [mobilize_condition]
			## [variable]
				## name=spiders.are_aggressive
				## equals=yes
			## [/variable]
			## # you don't get to re-try this; if you anger them they will not stop attacking you.
			## #   (even if you set spiders.are_aggressive=no via debug mode)
		## [/mobilize_condition]
	## [/micro_ai]
[/event]

# if you move to the tree before you can track, there is a small hint
[event]
	name=moveto
	id=spider_tree_no_tracking
	first_time_only=no
	{VOADAR_FILTER_VARIABLE Voadar.can_track no}
	[filter]
		id=Voadar
		x,y=70,50
	[/filter]
	[allow_undo]
	[/allow_undo]
	{VOADAR_MESSAGE_NARRATOR (_"There are some strange tracks here... They are quite old, so it's hard to tell exactly what happened. All you can see for sure is that something fairly heavy was dragged from the base of this tree. The marks disappear quickly into the hills, and you aren't a skilled enough $d|tracker$b| to follow them.")}
[/event]
[event]
	name=moveto
	id=spider_tree_can_track
	first_time_only=yes
	{VOADAR_FILTER_VARIABLE Voadar.can_track yes}
	[filter]
		id=Voadar
		x,y=70,50
	[/filter]
	{VOADAR_REMOVE_EVENT spider_tree_no_tracking}
	{VOADAR_MESSAGE_NARRATOR (_"There are some strange tracks here... They are quite old, so it's hard to tell exactly what happened. All you can see for sure is that something fairly heavy was dragged from the base of this tree. Remembering Grigar's teaching, you manage to follow the tracks!")}
[/event]

# at the beginning of the game, we choose a tile to be the entrance to the spider lair
# and set up a trail from the tree to it that Voadar can follow once he has learned to track
[event]
	name=prestart
	# first, select an acceptable location
	[store_locations]
		x=62-66
		y=46-53
		terrain=Mm
		[filter_adjacent_location]
			terrain=Mm^*
			count=6
		[/filter_adjacent_location]
		variable=temp_spider_locs
	[/store_locations]
	[set_variable]
		name=temp_rando
		rand=1..$temp_spider_locs.length|
	[/set_variable]
	{VARIABLE_OP temp_rando sub 1}
	# save the randomly chosen location for future reference
	{VARIABLE spiders.entrance.x $temp_spider_locs[$temp_rando|].x|}
	{VARIABLE spiders.entrance.y $temp_spider_locs[$temp_rando|].y|}
	
	# now use the tools in tracks_utils.cfg to make the tracks
	{GENERIC_UNIT 4 "Orcish Grunt" $spiders.entrance.x| $spiders.entrance.y|}
	[+unit]
		id=spider_legs
	[/unit]
	{VARIABLE tracks.id spider_legs}
	{VARIABLE tracks.end.x 70}
	{VARIABLE tracks.end.y 50}
	{VARIABLE tracks.group_name spiders}
	[fire_event]
		name=create_tracks
	[/fire_event]
	[kill]
		type=Orcish Grunt
		fire_event=no
	[/kill]
	{CLEAR_VARIABLE temp_rando,temp_spider_locs}
[/event]
	
# now let's make the actual entrance:
[event]
	name=moveto
	id=enter_spider_den
	first_time_only=no
	{VOADAR_FILTER_VARIABLE Voadar.can_track yes}
	[filter]
		id=Voadar
		x,y=$spiders.entrance.x|,$spiders.entrance.y|
	[/filter]
	{IF_VAR spiders.Voadar_has_found_entrance equals no (
		[then]
			{VARIABLE spiders.Voadar_has_found_entrance yes}
			{VOADAR_MESSAGE_NARRATOR (_"The marks of whatever, or whoever, was dragged here end as the terrain gets more rocky. Inspecting the area, you see a hidden opening; it seems that you found the entrance to some kind of cave or burrow.")}
			{VOADAR_MESSAGE_NARRATOR (_"To enter, you'll have to crawl through a narrow, uneven gap between large rocks. The only way to squeeze by is to make yourself smaller by leaving behind your food and items...")}
		[/then]
		[else]
			{VOADAR_MESSAGE_NARRATOR (_"To enter this cave, you'll have to crawl through a narrow, uneven gap between large rocks. The only way to squeeze by is to make yourself smaller by leaving behind your food and items...")}
		[/else]
	)}
	{VARIABLE Voadar.bool_message (_"Enter the cave without food or other items? (You will regain them as soon as you leave the cave)")}
	[fire_event]
		name=Voadar_bool_responds
	[/fire_event]
	{IF_VAR Voadar.bool_response equals yes (
		[else]
			[return]
			[/return]
		[/else]
	)}
	# this event handles stuff like spawning spiders.
	# it also is used to end the ants minigame if it was going
	[fire_event]
		name=begin_spider_stuff
	[/fire_event]
	# you can't see very far in here:
	[modify_unit]
		[filter]
			id=Voadar
		[/filter]
		vision=8
		# soo... if you have extra moves from the wood cutting game, vision will be a bit short. idc
	[/modify_unit]
	{TELEPORT_UNIT (id=Voadar) 59 42}
	{SCROLL_TO 59 42}
	[place_shroud]
		side=1
	[/place_shroud]
	[redraw]
		clear_shroud=yes
	[/redraw]
	# and, as promised, no items.
	{VARIABLE Voadar.allow_inventory no}
	# well, at least you get a refill on moves.
	[heal_unit]
		[filter]
			id=Voadar
		[/filter]
		amount=0
		moves=full
		restore_attacks=yes
		restore_statuses=no
	[/heal_unit]
[/event]

# and the exit
[event]
	name=moveto
	id=exit_spider_den_front
	first_time_only=no
	[filter]
		id=Voadar
		x,y=59,42
	[/filter]
	{TELEPORT_UNIT (id=Voadar) $spiders.entrance.x| $spiders.entrance.y|}
	{SCROLL_TO $spiders.entrance.x| $spiders.entrance.y|}
	# vision goes back to normal:
	[modify_unit]
		[filter]
			id=Voadar
		[/filter]
		vision=98
	[/modify_unit]
	# and so does shroud:
	[place_shroud]
		side=1
	[/place_shroud]
	[remove_shroud]
		side=1
		find_in=areas.all_out_door_locs.impassable
		[or]
			find_in=areas.all_out_door_locs.forest
		[/or]
		[or]
			find_in=areas.all_out_door_locs.village
		[/or]
		[or]
			find_in=areas.all_out_door_locs.home
		[/or]
		[or]
			find_in=areas.all_out_door_locs.farm
		[/or]
	[/remove_shroud]
	[redraw]
		clear_shroud=yes
	[/redraw]
	# and items come back, of course
	{VARIABLE Voadar.allow_inventory yes}
	# also, a courtesy moves refill, since moving around in the cave sucks so much
	{VOADAR_STORE_UNIT Voadar no}
	{VARIABLE Voadar.unit.moves $Voadar.unit.max_moves|}
	{VARIABLE Voadar.unit.status.slowed no}
	[unstore_unit]
		variable=Voadar.unit
		find_vacant=no
	[/unstore_unit]
	# and stop spawning spiders and stuff:
	[fire_event]
		name=end_spider_stuff
	[/fire_event]
[/event]

# moving through light webs slows you
[event]
	name=enter_hex
	id=webs_slow_you
	first_time_only=no
	[filter]
		id=Voadar
		[filter_location]
			terrain=*^Ywbl
		[/filter_location]
		[not]
			status=slowed
		[/not]
	[/filter]
	[harm_unit]
		[filter]
			id=Voadar
		[/filter]
		amount=0
		animate=yes
		slowed=yes
	[/harm_unit]
	[select_unit]
		id=Voadar
	[/select_unit]
[/event]

# we need to save all the locations that have thick webs:
[event]
	name=prestart
	[store_locations]	
		variable=spiders.all_thick_web_locs
		terrain=*^Ywbt
	[/store_locations]	
[/event]

# NOW 
# this is stuff that starts happening when you enter the den:
[event]
	name=begin_spider_stuff
	id=begin_spider_stuff
	first_time_only=no
	# first, we always spawn these two (unless you killed the queen)
	{UNIT 4 "Voadar Spider Giant" 60 59 (
		[modifications]
			{TRAIT_QUICK}
			{TRAIT_INTELLIGENT}
		[/modifications]
	)}{GUARDIAN}
	{GENERIC_UNIT 4 "Voadar Spider Scuttler" 54 43}
	#for future version:
	## {IF_VAR spiders.queen_is_dead equals no (
		## [then]
			## {NAMED_UNIT 4 (Voadar Spider Queen) 60 59 spider_queen (_"") ()}
		## [/then]
	## )}
	
	# each time you enter, different passages are open
	[set_variable]
		name=spiders.rando
		rand=1..2
	[/set_variable]
	{IF_VAR spiders.rando equals 1 (
		[then]
			[terrain]
				x,y=50,52
				terrain=Uu^Ywbl
			[/terrain]
		[/then]
		[else]
			[terrain]
				x,y=58,49
				terrain=Uu^Ywbl
			[/terrain]
		[/else]
	)}
	[set_variable]
		name=spiders.rando
		rand=1..2
	[/set_variable]
	{IF_VAR spiders.rando equals 1 (
		[then]
			[terrain]
				x,y=51,57
				terrain=Uu^Ywbl
			[/terrain]
			[terrain]
				x,y=52,56
				terrain=Uu^Ywbl
			[/terrain]
		[/then]
		[else]
			[terrain]
				x,y=56,56
				terrain=Uu^Ywbl
			[/terrain]
			[terrain]
				x,y=57,57
				terrain=Uu^Ywbl
			[/terrain]
		[/else]
	)}
	# now that those changes have been made, we must store all the locations that currently
	# are thick webs. Since spiders are allowed to move through thick webs, we'll have to manually
	# trade them with light webs and back each side 4 turn.
	[store_locations]
		terrain=*^Ywbt
		variable=spiders.thick_webs_this_round
	[/store_locations]
	
	# so, like i said, each side 4 turn...
	[event]
		name=side 4 turn
		id=let_spiders_move_through_webs
		first_time_only=no
		[for]
			array=spiders.thick_webs_this_round
			[do]
				[terrain]
					x=$spiders.thick_webs_this_round[$i|].x|
					y=$spiders.thick_webs_this_round[$i|].y|
					terrain=Uu^Ywbl
				[/terrain]
			[/do]
		[/for]
	[/event]
	[event]
		name=side 4 turn end
		id=others_cannot_move_through_webs
		first_time_only=no
		[for]
			array=spiders.thick_webs_this_round
			[do]
				[terrain]
					x=$spiders.thick_webs_this_round[$i|].x|
					y=$spiders.thick_webs_this_round[$i|].y|
					terrain=Uu^Ywbt
				[/terrain]
			[/do]
		[/for]
	[/event]
	
	# we also throw some dead animals in the light webs so 
	# voadar has a chance at surviving this place
	[store_locations]
		variable=spiders.temp_locs
		terrain=*^Ywbl
		[not]
			# there are two specific bits of light web that food should not go in:
			x,y=57,43
			[or]
				x,y=52,60
			[/or]
		[/not]
	[/store_locations]
	[for]
		end=4
		[do]
			# choose a random light web location:
			[set_variable]
				name=spiders.rando
				rand=1..$spiders.temp_locs.length|
			[/set_variable]
			{VARIABLE_OP spiders.rando sub 1}
			# exactly what goes in the tile differs; there should be two white (curing) bunnies
			# and two gray (hp only) bunnies
			{IF_VAR i less_than 3 (
				[then]
					[item]
						x=$spiders.temp_locs[$spiders.rando|].x|
						y=$spiders.temp_locs[$spiders.rando|].y|
						halo="items/dead-rabbit-gray.png"
						visible_in_fog=no
					[/item]
					[event]
						name=moveto
						id=spiders_food_$i|
						delayed_variable_substitution=no
						first_time_only=no
						[filter]
							id=Voadar
							x=$spiders.temp_locs[$spiders.rando|].x|
							y=$spiders.temp_locs[$spiders.rando|].y|
						[/filter]
						[message]
							speaker=narrator
							image="items/dead-rabbit-gray.png"
							message=_"There's a dead animal here. It doesn't exactly look fresh, but it at least isn't rotten."
						[/message]
						{VARIABLE Voadar.bool_message (_"Eat the dead animal to restore 25 HP?")}
						[fire_event]
							name=Voadar_bool_responds
						[/fire_event]
						{IF_VAR Voadar.bool_response equals yes (
							[then]
								[heal_unit]
									[filter]
										id=Voadar
									[/filter]
									amount=25
									animate=yes
									restore_statuses=no
								[/heal_unit]
								{VOADAR_REMOVE_EVENT spiders_food_$i|}
								[remove_item]
									x=$spiders.temp_locs[$spiders.rando|].x|
									y=$spiders.temp_locs[$spiders.rando|].y|
								[/remove_item]
							[/then]
						)}
					[/event]
				[/then]
				[else]
					[item]
						x=$spiders.temp_locs[$spiders.rando|].x|
						y=$spiders.temp_locs[$spiders.rando|].y|
						halo="items/dead-rabbit-white.png"
						visible_in_fog=no
					[/item]
					[event]
						name=moveto
						id=spiders_food_$i|
						delayed_variable_substitution=no
						first_time_only=no
						[filter]
							id=Voadar
							x=$spiders.temp_locs[$spiders.rando|].x|
							y=$spiders.temp_locs[$spiders.rando|].y|
						[/filter]
						[message]
							speaker=narrator
							image="items/dead-rabbit-white.png"
							message=_"There's a dead animal here. It looks surprisingly fresh for something hanging in a spiderweb."
						[/message]
						{VARIABLE Voadar.bool_message (_"Eat the dead animal to restore 25 HP and cure poison?")}
						[fire_event]
							name=Voadar_bool_responds
						[/fire_event]
						{IF_VAR Voadar.bool_response equals yes (
							[then]
								[heal_unit]
									[filter]
										id=Voadar
									[/filter]
									amount=25
									animate=yes
									restore_statuses=yes
								[/heal_unit]
								[modify_unit]
									[filter]
										id=Voadar
									[/filter]
									[status]
										unhealable=yes
									[/status]
								[/modify_unit]
								{VOADAR_REMOVE_EVENT spiders_food_$i|}
								[remove_item]
									x=$spiders.temp_locs[$spiders.rando|].x|
									y=$spiders.temp_locs[$spiders.rando|].y|
								[/remove_item]
							[/then]
						)}
					[/event]
				[/else]
			)}
			# and clear that spot in the array so two rabbits are never in the same tile:
			{CLEAR_VARIABLE spiders.temp_locs[$spiders.rando|]}
		[/do]
	[/for]
	{CLEAR_VARIABLE spiders.temp_locs}
	
	# finally, randomly spawn some spiders
	[event]
		name=new turn
		id=spawn_new_spider
		first_time_only=no
		#for future release:
		# we don't spawn unless they have become aggressive (started attacking)
		# otherwise they would build up and become problematic in several ways
		## {IF_VAR spiders.are_aggressive equals no (
			## [then]
				## [return]
				## [/return]
			## [/then]
		## )}
		# also, a new spider every turn would be overwhelming of course
		{VARIABLE spiders.turn $turn_number|}
		{VARIABLE_OP spiders.turn modulo 3}
		{IF_VAR spiders.turn equals 0 (
			[then]
				[set_variable]
					name=spiders.rando
					rand=1..2
				[/set_variable]
				{IF_VAR spiders.rando equals 1 (
					[then]
						{VARIABLE spiders.spawn_type "Voadar Spider Scuttler"}
					[/then]
					[else]
						{VARIABLE spiders.spawn_type "Voadar Spider Weaver"}
					[/else]
				)}
				[set_variable]
					name=spiders.rando
					rand=1..4
				[/set_variable]
				[switch]
					variable=spiders.rando
					[case]
						value=1
						{GENERIC_UNIT 4 $spiders.spawn_type| 50 43}
					[/case]
					[case]
						value=2
						{GENERIC_UNIT 4 $spiders.spawn_type| 53 50}
					[/case]
					[case]
						value=3
						{GENERIC_UNIT 4 $spiders.spawn_type| 59 54}
					[/case]
					[else]
						{GENERIC_UNIT 4 $spiders.spawn_type| 51 59}
					[/else]
				[/switch]
			[/then]
		)}
	[/event]
[/event]

# this is when you leave; it ends various things like spider spawning
[event]
	name=end_spider_stuff
	id=end_spider_stuff
	first_time_only=no
	{VOADAR_REMOVE_EVENT spawn_new_spider}
	{VOADAR_REMOVE_EVENT let_spiders_move_through_webs}
	{VOADAR_REMOVE_EVENT others_cannot_move_through_webs}
	[for]
		array=spiders.all_thick_web_locs
		[do]
			[terrain]
				x=$spiders.all_thick_web_locs[$i|].x|
				y=$spiders.all_thick_web_locs[$i|].y|
				terrain=Uu^Ywbt
			[/terrain]
		[/do]
	[/for]
	[kill]
		type=Voadar Spider Giant,Voadar Spider Scuttler, Voadar Spider Weaver, Voadar Spider Queen
		animate=no
		fire_event=no
	[/kill]
	[for]
		end=4
		[do]
			{VOADAR_REMOVE_EVENT spiders_food_$i|}
		[/do]
	[/for]
	[remove_item]
		image="items/dead-rabbit-gray.png"
	[/remove_item]
	[remove_item]
		image="items/dead-rabbit-white.png"
	[/remove_item]
	{CLEAR_VARIABLE spiders.food_locs}
[/event]

#for future release:
# if you attack a spider, they start attacking you:
## [event]
	## name=attack
	## id=attack_a_spider
	## [filter_second]
		## type=Voadar Spider Scuttler,Voadar Spider Weaver,Voadar Spider Giant,Voadar Spider Queen
	## [/filter_second]
	## # setting this variable disables the micro_ai that normally stops them from attacking you
	## {VARIABLE spiders.are_aggressive yes}
## [/event]
# if the queen dies, we make a note to not respawn it if you come back in
## [event]
	## name=die
	## id=spider_queen_died
	## [filter]
		## id=spider_queen
	## [/filter]
	## {VARIABLE spiders.queen_is_dead yes}
## [/event]

# clear variables when the scenario ends:
[event]
	name=victory
	id=spiders_clear_variables
	{CLEAR_VARIABLE spiders}
[/event]




